{
    "./src/AbstractModalHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AbstractModalHeader",
            "props": {
                "closeLabel": {
                    "defaultValue": {
                        "value": "'Close'",
                        "computed": false
                    },
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea ModalContext, the onHide will automatically be propagated upto the parent `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/AccordionBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AccordionBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-body'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component expands",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to expand",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the component has expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component collapses",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to collapse",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has collapsed",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Accordion.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Accordion",
            "props": {
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "The current active key that corresponds to the currently expanded card",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "array"
                            }
                        ]
                    },
                    "required": false
                },
                "defaultActiveKey": {
                    "description": "The default active key that is expanded on start",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "array"
                            }
                        ]
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when the active item changes. js(eventKey: string | string[] | null, event: Object) => void @controllable activeIndex",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "flush": {
                    "description": "Renders accordion edge-to-edge with its parent container",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "alwaysOpen": {
                    "description": "Allow accordion items to stay open when another item is opened",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/AccordionButton.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AccordionButton",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'button'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-button'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/AccordionCollapse.tsx": [
        {
            "description": "This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).",
            "methods": [],
            "displayName": "AccordionCollapse",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A key that corresponds to the toggler that triggers this collapse's expand or collapse.",
                    "type": {
                        "name": "string"
                    },
                    "required": true
                },
                "children": {
                    "description": "Children prop should only contain a single child, and is enforced as such",
                    "type": {
                        "name": "element"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/Alert.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Alert",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@default 'alert'",
                    "type": {
                        "name": "string"
                    }
                },
                "variant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "| 'primary'| 'secondary'| 'success'| 'danger'| 'warning'| 'info'| 'dark'| 'light'| string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'primary'"
                            },
                            {
                                "name": "literal",
                                "value": "'secondary'"
                            },
                            {
                                "name": "literal",
                                "value": "'success'"
                            },
                            {
                                "name": "literal",
                                "value": "'danger'"
                            },
                            {
                                "name": "literal",
                                "value": "'warning'"
                            },
                            {
                                "name": "literal",
                                "value": "'info'"
                            },
                            {
                                "name": "literal",
                                "value": "'dark'"
                            },
                            {
                                "name": "literal",
                                "value": "'light'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "The Alert visual variant@type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light'}",
                    "type": {
                        "name": "string"
                    }
                },
                "dismissible": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Renders a properly aligned dismiss button, as well asadding extra horizontal padding to the Alert.",
                    "type": {
                        "name": "bool"
                    }
                },
                "show": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Controls the visual state of the Alert.@controllable onClose",
                    "type": {
                        "name": "bool"
                    }
                },
                "onClose": {
                    "required": false,
                    "tsType": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(a: any, b: any) => void",
                        "signature": {
                            "arguments": [
                                {
                                    "type": {
                                        "name": "any"
                                    },
                                    "name": "a"
                                },
                                {
                                    "type": {
                                        "name": "any"
                                    },
                                    "name": "b"
                                }
                            ],
                            "return": {
                                "name": "void"
                            }
                        }
                    },
                    "description": "Callback fired when alert is closed.@controllable show",
                    "type": {
                        "name": "func"
                    }
                },
                "closeLabel": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "Sets the text for alert close button.",
                    "type": {
                        "name": "string"
                    }
                },
                "closeVariant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'white' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'white'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    }
                },
                "transition": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "boolean | TransitionComponent",
                        "elements": [
                            {
                                "name": "boolean"
                            },
                            {
                                "name": "TransitionComponent"
                            }
                        ]
                    },
                    "description": "Animate the alert dismissal. Defaults to using `<Fade>` animation or use`false` to disable. A custom `react-transition-group` Transition can alsobe provided.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "elementType"
                            }
                        ]
                    }
                }
            }
        }
    ],
    "./src/AccordionHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AccordionHeader",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'h2'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Click handler for the `AccordionButton` element",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/AccordionItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AccordionItem",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A unique key used to control this item's collapse/expand.@required",
                    "type": {
                        "name": "string"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/AlertLink.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AlertLink",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "Anchor",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/AlertHeading.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "AlertHeading",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "divWithClassName('h4')",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Badge.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Badge",
            "props": {
                "bg": {
                    "defaultValue": {
                        "value": "'primary'",
                        "computed": false
                    },
                    "description": "The visual style of the badge@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "pill": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Add the `pill` modifier to make badges more rounded withsome additional horizontal padding",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'span'",
                        "computed": false
                    },
                    "description": "@default span",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'badge'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "text": {
                    "description": "Sets badge text color@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Breadcrumb.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Breadcrumb",
            "props": {
                "listProps": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "Additional props passed as-is to the underlying `<ol>` element",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "label": {
                    "defaultValue": {
                        "value": "'breadcrumb'",
                        "computed": false
                    },
                    "description": "ARIA label for the nav elementhttps://www.w3.org/TR/wai-aria-practices/#breadcrumb",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'nav'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'breadcrumb'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/BreadcrumbItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "BreadcrumbItem",
            "props": {
                "active": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Adds a visual \"active\" state to a BreadcrumbItem and disables the link.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'li'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "linkAs": {
                    "defaultValue": {
                        "value": "Anchor",
                        "computed": true
                    },
                    "description": "You can use a custom element type for this component's inner link.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "linkProps": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "Additional props passed as-is to the underlying link for non-active items.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'breadcrumb-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "`href` attribute for the inner `a` element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "title": {
                    "description": "`title` attribute for the inner `a` element",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "target": {
                    "description": "`target` attribute for the inner `a` element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ButtonGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ButtonGroup",
            "props": {
                "vertical": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Make the set of Buttons appear vertically stacked.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "defaultValue": {
                        "value": "'group'",
                        "computed": false
                    },
                    "description": "An ARIA role describing the button group. Usually the default\"group\" role is fine. An `aria-label` or `aria-labelledby`prop is also recommended.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Sets the size for all Buttons in the group.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ButtonToolbar.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ButtonToolbar",
            "props": {
                "role": {
                    "defaultValue": {
                        "value": "'toolbar'",
                        "computed": false
                    },
                    "description": "The ARIA role describing the button toolbar. Generally the default\"toolbar\" role is correct. An `aria-label` or `aria-labelledby`prop is also recommended.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn-toolbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Card.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Card",
            "props": {
                "body": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "When this prop is set, it creates a Card with a Card.Body insidepassing the children directly to it",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'card'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Sets card background@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "text": {
                    "description": "Sets card text color@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light'|'white'|'muted')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "border": {
                    "description": "Sets card border color@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardFooter.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardFooter",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardGroup",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardHeader",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'card-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardImg.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardImg",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@default 'card-img'",
                    "type": {
                        "name": "string"
                    }
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": "",
                    "defaultValue": {
                        "value": "'img'",
                        "computed": false
                    },
                    "type": {
                        "name": "elementType"
                    }
                },
                "variant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'top' | 'bottom' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'top'"
                            },
                            {
                                "name": "literal",
                                "value": "'bottom'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Defines image position insidethe card.@type {('top'|'bottom')}",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            }
                        ]
                    }
                }
            }
        }
    ],
    "./src/CardImgOverlay.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardImgOverlay",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardLink.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardLink",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'a'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardSubtitle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardSubtitle",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "divWithClassName('h6')",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardTitle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardTitle",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "divWithClassName('h5')",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CardText.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CardText",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'p'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Carousel.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Carousel",
            "props": {
                "defaultActiveIndex": {
                    "defaultValue": {
                        "value": "0",
                        "computed": false
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'carousel'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "slide": {
                    "description": "Enables animation on the Carousel as it transitions between slides.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "fade": {
                    "description": "Animates slides with a crossfade animation instead of the default slide animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "controls": {
                    "description": "Show the Carousel previous and next arrows for changing the current slide",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "indicators": {
                    "description": "Show a set of slide position indicators",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "indicatorLabels": {
                    "description": "An array of labels for the indicators. Defaults to \"Slide #\" if not provided.",
                    "type": {
                        "name": "array"
                    },
                    "required": false
                },
                "activeIndex": {
                    "description": "Controls the current visible slide@controllable onSelect",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when the active item changes. js(eventKey: number, event: Object | null) => void @controllable activeIndex",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSlide": {
                    "description": "Callback fired when a slide transition starts. js(eventKey: number, direction: 'left' | 'right') => void ",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSlid": {
                    "description": "Callback fired when a slide transition ends. js(eventKey: number, direction: 'left' | 'right') => void ",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "interval": {
                    "description": "The amount of time to delay between automatically cycling an item. If `null`, carousel will not automatically cycle.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "number"
                            },
                            {
                                "name": "enum",
                                "value": [
                                    {
                                        "value": "null",
                                        "computed": false
                                    }
                                ]
                            }
                        ]
                    },
                    "required": false
                },
                "keyboard": {
                    "description": "Whether the carousel should react to keyboard events.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "pause": {
                    "description": "If set to `\"hover\"`, pauses the cycling of the carousel on `mouseenter` and resumes the cycling of the carousel on `mouseleave`. If set to `false`, hovering over the carousel won't pause it.On touch-enabled devices, when set to `\"hover\"`, cycling will pause on `touchend` (once the user finished interacting with the carousel) for two intervals, before automatically resuming. Note that this is in addition to the above mouse behavior.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'hover'",
                                "computed": false
                            },
                            {
                                "value": "false",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "wrap": {
                    "description": "Whether the carousel should cycle continuously or have hard stops.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "touch": {
                    "description": "Whether the carousel should support left/right swipe interactions on touchscreen devices.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "prevIcon": {
                    "description": "Override the default button icon for the \"previous\" control",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "prevLabel": {
                    "description": "Label shown to screen readers only, can be used to show the previous elementin the carousel.Set to null to deactivate.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "nextIcon": {
                    "description": "Override the default button icon for the \"next\" control",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "nextLabel": {
                    "description": "Label shown to screen readers only, can be used to show the next elementin the carousel.Set to null to deactivate.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Color variant that controls the colors of the controls, indicatorsand captions.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CarouselCaption.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CarouselCaption",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CarouselItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CarouselItem",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'carousel-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "interval": {
                    "description": "The amount of time to delay between automatically cycling this specific item. Will default to the Carousel's `interval` prop value if none is specified.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/CloseButton.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "CloseButton",
            "props": {
                "aria-label": {
                    "defaultValue": {
                        "value": "'Close'",
                        "computed": false
                    },
                    "description": "An accessible label indicating the relevant information about the Close Button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback fired after the Close Button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Render different color variant for the button.Omitting this will render the default dark color.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Col.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Col",
            "props": {
                "bsPrefix": {
                    "description": "@default 'col'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "xs": {
                    "description": "The number of columns to span on extra small devices (<576px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                },
                "sm": {
                    "description": "The number of columns to span on small devices (≥576px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                },
                "md": {
                    "description": "The number of columns to span on medium devices (≥768px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                },
                "lg": {
                    "description": "The number of columns to span on large devices (≥992px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                },
                "xl": {
                    "description": "The number of columns to span on extra large devices (≥1200px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                },
                "xxl": {
                    "description": "The number of columns to span on extra extra large devices (≥1400px)@type {(boolean|\"auto\"|number|{ span: boolean|\"auto\"|number, offset: number, order: \"first\"|\"last\"|number })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "colSize"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "size": {
                                        "name": "custom",
                                        "raw": "colSize",
                                        "required": false
                                    },
                                    "order": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    },
                                    "offset": {
                                        "name": "custom",
                                        "raw": "stringOrNumber",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Collapse.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Collapse",
            "props": {
                "dimension": {
                    "defaultValue": {
                        "value": "'height'",
                        "computed": false
                    },
                    "description": "The dimension used when collapsing, or a function that returns thedimension",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "enum",
                                "value": [
                                    {
                                        "value": "'height'",
                                        "computed": false
                                    },
                                    {
                                        "value": "'width'",
                                        "computed": false
                                    }
                                ]
                            },
                            {
                                "name": "func"
                            }
                        ]
                    },
                    "required": false
                },
                "in": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Show the component; triggers the expand or collapse animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "defaultValue": {
                        "value": "300",
                        "computed": false
                    },
                    "description": "Duration of the collapse animation in milliseconds, to ensure thatfinishing callbacks are fired even if the original browser transition endevents are canceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Unmount the component (remove it from the DOM) when it is collapsed",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Run the expand animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "getDimensionValue": {
                    "defaultValue": {
                        "value": "function getDefaultDimensionValue(  dimension: Dimension,  elem: HTMLElement,): number {  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;  const value = elem[offset];  const margins = MARGINS[dimension];  return (    value +    // @ts-ignore    parseInt(css(elem, margins[0]), 10) +    // @ts-ignore    parseInt(css(elem, margins[1]), 10)  );}",
                        "computed": false
                    },
                    "description": "Function that returns the height or width of the animating DOM nodeAllows for providing some custom logic for how much the Collapse componentshould animate in its specified dimension. Called with the currentdimension prop value and the DOM node.@default element.offsetWidth | element.offsetHeight",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component expands",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to expand",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the component has expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component collapses",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to collapse",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has collapsed",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "role": {
                    "description": "ARIA role of collapsible element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "children": {
                    "description": "You must provide a single JSX child element to this component and that element cannot be a \\<React.Fragment\\>",
                    "type": {
                        "name": "element"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/Container.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Container",
            "props": {
                "fluid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Allow the Container to fill all of its available horizontal space.@type {(true|\"sm\"|\"md\"|\"lg\"|\"xl\"|\"xxl\")}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "You can use a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'container'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownHeader",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                },
                "role": {
                    "defaultValue": {
                        "value": "'heading'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownButton.tsx": [
        {
            "description": "A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`are passed directly to the default `Dropdown.Menu`. This component accepts all of[`Dropdown`'s props](#dropdown-props)._All unknown props are passed through to the `Dropdown` component._ Onlythe Button `variant`, `size` and `bsPrefix` props are passed to the toggle,along with menu-related props are passed to the `Dropdown.Menu`",
            "methods": [],
            "displayName": "DropdownButton",
            "props": {
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An `href` passed to the Toggle component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the Toggle component",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "title": {
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    },
                    "required": true
                },
                "disabled": {
                    "description": "Disables both Buttons",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu._see [DropdownMenu](#dropdown-menu-props) for more details_@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "alignDirection"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "sm": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "md": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "lg": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xxl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "object"
                            }
                        ]
                    },
                    "required": false
                },
                "menuRole": {
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "renderMenuOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#dropdown-menu-props) for more details_",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "menuVariant": {
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "flip": {
                    "description": "Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer toPopper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Dropdown.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Dropdown",
            "props": {
                "bsPrefix": {
                    "description": "@default 'dropdown'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "drop": {
                    "description": "Determines the direction and location of the Menu in relation to it's Toggle.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'up'",
                                "computed": false
                            },
                            {
                                "value": "'up-centered'",
                                "computed": false
                            },
                            {
                                "value": "'start'",
                                "computed": false
                            },
                            {
                                "value": "'end'",
                                "computed": false
                            },
                            {
                                "value": "'down'",
                                "computed": false
                            },
                            {
                                "value": "'down-centered'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu to the specified side of the Dropdown toggle. You canalso align the menu responsively for breakpoints starting at `sm` and up.The alignment direction will affect the specified breakpoint or larger.*Note: Using responsive alignment will disable Popper usage for positioning.*@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "alignDirection"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "sm": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "md": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "lg": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xxl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "object"
                            }
                        ]
                    },
                    "required": false
                },
                "show": {
                    "description": "Whether or not the Dropdown is visible.@controllable onToggle",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "onToggle": {
                    "description": "A callback fired when the Dropdown wishes to change visibility. Called with the requested`show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`. jsfunction(  nextShow: boolean,  meta: ToggleMetadata,): void @controllable show",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a menu item is selected. js(eventKey: any, event: Object) => any ",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "focusFirstItemOnShow": {
                    "description": "Controls the focus behavior for when the Dropdown is opened. Set to`true` to always focus the first menu item, `keyboard` to focus only whennavigating via the keyboard, or `false` to disable completelyThe Default behavior is `false` **unless** the Menu has a `role=\"menu\"`where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "false",
                                "computed": false
                            },
                            {
                                "value": "true",
                                "computed": false
                            },
                            {
                                "value": "'keyboard'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "navbar": {
                    "description": "@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoClose": {
                    "description": "Controls the auto close behaviour of the dropdown when clicking outside ofthe button or the list.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "true",
                                "computed": false
                            },
                            {
                                "value": "'outside'",
                                "computed": false
                            },
                            {
                                "value": "'inside'",
                                "computed": false
                            },
                            {
                                "value": "false",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownItem",
            "props": {
                "disabled": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Disable the menu item, making it unselectable.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "Anchor",
                        "computed": true
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "Highlight the menu item as active.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "Value passed to the `onSelect` handler, useful for identifying the selected menu item.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "href": {
                    "description": "HTML `href` attribute corresponding to `a.href`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Callback fired when the menu item is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownItemText.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownItemText",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'span'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownDivider.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownDivider",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'hr'",
                        "computed": false
                    },
                    "required": false
                },
                "role": {
                    "defaultValue": {
                        "value": "'separator'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownMenu.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownMenu",
            "props": {
                "flip": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Have the dropdown switch to it's opposite placement when necessary to stay on screen.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "Control the rendering of the DropdownMenu. All non-menu props(listed here) are passed through to the `as` Component.If providing a custom, non DOM, component. the `show`, `close` and `align` propsare also injected and should be handled appropriately.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-menu'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "Controls the visibility of the Dropdown menu",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "renderOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu to the specified side of the container. You can also alignthe menu responsively for breakpoints starting at `sm` and up. The alignmentdirection will affect the specified breakpoint or larger.*Note: Using responsive alignment will disable Popper usage for positioning.*@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "alignDirection"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "sm": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "md": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "lg": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xxl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "object"
                            }
                        ]
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed*Note: For custom dropdown components, you will have to pass the`rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menucomponent ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'click'",
                                "computed": false
                            },
                            {
                                "value": "'mousedown'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "popperConfig": {
                    "description": "A set of popper options and props passed directly to Popper.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/DropdownToggle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "DropdownToggle",
            "props": {
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "ReactElementType",
                        "raw": "React.ElementType"
                    },
                    "description": "",
                    "defaultValue": {
                        "value": "React.forwardRef<HTMLButtonElement, ButtonProps>(  (    {      as,      bsPrefix,      variant = 'primary',      size,      active = false,      disabled = false,      className,      ...props    },    ref,  ) => {    const prefix = useBootstrapPrefix(bsPrefix, 'btn');    const [buttonProps, { tagName }] = useButtonProps({      tagName: as,      disabled,      ...props,    });    const Component = tagName as React.ElementType;    return (      <Component        {...buttonProps}        {...props}        ref={ref}        disabled={disabled}        className={classNames(          className,          prefix,          active && 'active',          variant && `${prefix}-${variant}`,          size && `${prefix}-${size}`,          props.href && disabled && 'disabled',        )}      />    );  },)",
                        "computed": true
                    },
                    "type": {
                        "name": "elementType"
                    }
                },
                "split": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "",
                    "type": {
                        "name": "bool"
                    }
                },
                "childBsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "to passthrough to the underlying button or whatever from DropdownButton@private",
                    "type": {
                        "name": "string"
                    }
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-toggle'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute, necessary for assistive technologies, such as screen readers.@type {string|number}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            },
            "composes": [
                "Omit"
            ]
        }
    ],
    "./src/ElementChildren.tsx": [
        {
            "description": "Iterates through children that are typically specified as `props.children`,but only maps over children that are \"valid elements\".The mapFunction provided index will be normalised to the components mapped,so an invalid component would not increase the index.",
            "methods": [],
            "displayName": "map"
        }
    ],
    "./src/Fade.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Fade",
            "props": {
                "transitionClasses": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "Applies additional specified classes during the transition. Takes an objectwhere the keys correspond to the Transition status",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "in": {
                    "description": "Show the component; triggers the fade in or fade out animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the component (remove it from the DOM) when it is faded out",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "description": "Run the fade in animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "description": "Duration of the fade animation in milliseconds, to ensure that finishingcallbacks are fired even if the original browser transition end events arecanceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component fades in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to fade in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the has component faded in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component fades out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to fade out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has faded out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "children": {
                    "description": "You must provide a single JSX child element to this component and that element cannot be a \\<React.Fragment\\>",
                    "type": {
                        "name": "element"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/Feedback.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Feedback",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "type": {
                    "defaultValue": {
                        "value": "'valid'",
                        "computed": false
                    },
                    "description": "Specify whether the feedback is for valid or invalid fields@type {('valid'|'invalid')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "tooltip": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Display feedback as a tooltip.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Figure.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Figure",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'figure'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FigureCaption.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FigureCaption",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'figcaption'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FigureImage.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FigureImage",
            "props": {
                "fluid": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Sets image as fluid image.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'img'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "rounded": {
                    "description": "Sets image shape as rounded.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "roundedCircle": {
                    "description": "Sets image shape as circle.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "thumbnail": {
                    "description": "Sets image shape as thumbnail.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Form.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Form",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'form'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The Form `ref` will be forwarded to the underlying element,which means, unless it's rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "validated": {
                    "description": "Mark a form as having been validated. Setting it to `true` willtoggle any validation styles on the forms elements.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormCheckInput.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormCheckInput",
            "props": {
                "type": {
                    "defaultValue": {
                        "value": "'checkbox'",
                        "computed": false
                    },
                    "description": "The type of checkable.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'radio'",
                                "computed": false
                            },
                            {
                                "value": "'checkbox'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "isValid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Manually style the input as valid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Manually style the input as invalid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'input'",
                        "computed": false
                    },
                    "description": "The underlying HTML element to use when rendering the FormCheckInput.@type {('input'|elementType)}",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-check-input'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "A HTML id attribute, necessary for proper form accessibility.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormCheck.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormCheck",
            "props": {
                "inline": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Groups controls horizontally with other `FormCheck`s.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "reverse": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Put your checkboxes, radios, and switches on the opposite side.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Disables the control.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isValid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Manually style the input as valid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Manually style the input as invalid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "feedbackTooltip": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Display feedback as a tooltip.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "title": {
                    "defaultValue": {
                        "value": "''",
                        "computed": false
                    },
                    "description": "`title` attribute for the underlying `FormCheckLabel`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "defaultValue": {
                        "value": "'checkbox'",
                        "computed": false
                    },
                    "description": "The type of checkable.@type {('radio' | 'checkbox' | 'switch')}",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'radio'",
                                "computed": false
                            },
                            {
                                "value": "'checkbox'",
                                "computed": false
                            },
                            {
                                "value": "'switch'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'input'",
                        "computed": false
                    },
                    "description": "The underlying HTML element to use when rendering the FormCheck.@type {('input'|elementType)}",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-check'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsSwitchPrefix": {
                    "description": "bsPrefix override for the base switch class.@default 'form-switch'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormCheck `ref` will be forwarded to the underlying input element,which means it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "id": {
                    "description": "A HTML id attribute, necessary for proper form accessibility.An id is recommended for allowing label clicks to toggle the check control.This is **required** when `type=\"switch\"` due to how they are rendered.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "children": {
                    "description": "Provide a function child to manually handle the layout of the FormCheck's inner components. jsx<FormCheck>  <FormCheck.Input isInvalid type={radio} />  <FormCheck.Label>Allow us to contact you?</FormCheck.Label>  <Feedback type=\"invalid\">Yo this is required</Feedback></FormCheck> ",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "label": {
                    "description": "Label for the control.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "feedback": {
                    "description": "A message to display when the input is in a validation state",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "feedbackType": {
                    "description": "Specify whether the feedback is for valid or invalid fields@type {('valid'|'invalid')}",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'valid'",
                                "computed": false
                            },
                            {
                                "value": "'invalid'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FloatingLabel.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FloatingLabel",
            "props": {
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "controlId": {
                    "description": "Sets `id` on `<FormControl>` and `htmlFor` on `<label>`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "label": {
                    "description": "Form control label.",
                    "type": {
                        "name": "node"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/FormCheckLabel.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormCheckLabel",
            "props": {
                "bsPrefix": {
                    "description": "@default 'form-check-label'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlFor": {
                    "description": "The HTML for attribute for associating the label with an input",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormControl.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormControl",
            "props": {
                "isValid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Add \"valid\" validation styles to the control",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Add \"invalid\" validation styles to the control and accompanying label",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'input'",
                        "computed": false
                    },
                    "description": "The underlying HTML element to use when rendering the FormControl.@type {('input'|'textarea'|elementType)}",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default {'form-control'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormControl `ref` will be forwarded to the underlying input element,which means unless `as` is a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "size": {
                    "description": "Input size variants@type {('sm'|'lg')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlSize": {
                    "description": "The size attribute of the underlying HTML element.Specifies the visible width in characters if `as` is `'input'`.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "plaintext": {
                    "description": "Render the input as plain text. Generally used along side `readOnly`.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "readOnly": {
                    "description": "Make the control readonly",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "arrayOf",
                                "value": {
                                    "name": "string"
                                }
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "type": {
                    "description": "The HTML input `type`, which is only relevant if `as` is `'input'` (the default).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormGroup",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "controlId": {
                    "description": "Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormGroup `ref` will be forwarded to the underlying element.Unless the FormGroup is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormFloating.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormFloating",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormLabel.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormLabel",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'label'",
                        "computed": false
                    },
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "column": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Renders the FormLabel as a `<Col>` component (accepting all the same props),as well as adding additional styling for horizontal forms.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "enum",
                                "value": [
                                    {
                                        "value": "'sm'",
                                        "computed": false
                                    },
                                    {
                                        "value": "'lg'",
                                        "computed": false
                                    }
                                ]
                            }
                        ]
                    },
                    "required": false
                },
                "visuallyHidden": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Hides the label visually while still allowing it to beread by assistive technologies.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-label'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlFor": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormLabel `ref` will be forwarded to the underlying element.Unless the FormLabel is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormRange.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormRange",
            "props": {
                "bsPrefix": {
                    "description": "@default {'form-range'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "arrayOf",
                                "value": {
                                    "name": "string"
                                }
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "id": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormText.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormText",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'small'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-text'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormText `ref` will be forwarded to the underlying element.Unless the FormText is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "muted": {
                    "description": "A convenience prop for add the `text-muted` class,since it's so commonly used here.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Image.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Image",
            "props": {
                "fluid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Sets image as fluid image.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rounded": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Sets image shape as rounded.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "roundedCircle": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Sets image shape as circle.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "thumbnail": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Sets image shape as thumbnail.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'img'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/FormSelect.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "FormSelect",
            "props": {
                "isValid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Add \"valid\" validation styles to the control",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Add \"invalid\" validation styles to the control and accompanying label",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default {'form-select'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Size variants@type {('sm'|'lg')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlSize": {
                    "description": "The size attribute of the underlying HTML element.Specifies the number of visible options.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "arrayOf",
                                "value": {
                                    "name": "string"
                                }
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/InputGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "InputGroup",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'input-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Control the size of buttons and form elements from the top-level.@type {('sm'|'lg')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "hasValidation": {
                    "description": "Handles the input's rounded corners when using form validation.Use this when your input group contains both an input and feedback element.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/InputGroupText.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "InputGroupText",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'span'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ListGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ListGroup",
            "props": {
                "bsPrefix": {
                    "description": "@default 'list-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Adds a variant to the list-group@type {('flush')}",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'flush'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "horizontal": {
                    "description": "Changes the flow of the list group items from vertical to horizontal.A value of `null` (the default) sets it to vertical for all breakpoints;Just including the prop sets it for all breakpoints, while `{sm|md|lg|xl|xxl}`makes the list group horizontal starting at that breakpoint’s `min-width`.@type {(true|'sm'|'md'|'lg'|'xl'|'xxl')}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "numbered": {
                    "description": "Generate numbered list items.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "You can use a custom element type for this component.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ListGroupItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ListGroupItem",
            "props": {
                "bsPrefix": {
                    "description": "@default 'list-group-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Sets contextual classes for list item.@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "action": {
                    "description": "Marks a ListGroupItem as actionable, applying additional hover, active and disabled stylesfor links and buttons.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "active": {
                    "description": "Sets list item as active.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Sets list item state as disabled.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "href": {
                    "description": "Providing a `href` and setting `action` to `true`, it will render the ListGroup.Item as an `<a>` element (unless `as` is provided).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "You can use a custom element type for this component. For none `action` items, items render as `li`.For actions the default is an anchor or button element depending on whether a `href` is provided.@default {'div' | 'a' | 'button'}",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Button.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Button",
            "props": {
                "variant": {
                    "defaultValue": {
                        "value": "'primary'",
                        "computed": false
                    },
                    "description": "One or more button variant combinationsbuttons may be one of a variety of visual variants such as:`'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`as well as \"outline\" versions (prefixed by 'outline-*')`'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Manually set the visual state of the button to `:active`",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Disables the Button, preventing mouse events,even if the underlying component is an `<a>` element",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Callback fired when the button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "size": {
                    "description": "Specifies a large or small button.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "Providing a `href` will render an `<a>` element, _styled_ as a button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "Defines HTML button type attribute.@default 'button'",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'button'",
                                "computed": false
                            },
                            {
                                "value": "'reset'",
                                "computed": false
                            },
                            {
                                "value": "'submit'",
                                "computed": false
                            },
                            {
                                "value": "null",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ModalBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ModalBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Modal.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Modal",
            "props": {
                "dialogAs": {
                    "defaultValue": {
                        "value": "React.forwardRef<HTMLDivElement, ModalDialogProps>(  (    {      bsPrefix,      className,      contentClassName,      centered,      size,      fullscreen,      children,      scrollable,      ...props    }: ModalDialogProps,    ref,  ) => {    bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');    const dialogClass = `${bsPrefix}-dialog`;    const fullScreenClass =      typeof fullscreen === 'string'        ? `${bsPrefix}-fullscreen-${fullscreen}`        : `${bsPrefix}-fullscreen`;    return (      <div        {...props}        ref={ref}        className={classNames(          dialogClass,          className,          size && `${bsPrefix}-${size}`,          centered && `${dialogClass}-centered`,          scrollable && `${dialogClass}-scrollable`,          fullscreen && fullScreenClass,        )}      >        <div className={classNames(`${bsPrefix}-content`, contentClassName)}>          {children}        </div>      </div>    );  },)",
                        "computed": true
                    },
                    "description": "A Component type that provides the modal content Markup. This is a usefulprop when you want to use your own styles and markup to create a custommodal component.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "show": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "When `true` The modal will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "animation": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Open and close the Modal with a slide and fade animation.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdrop": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Include a backdrop component. Specify 'static' for a backdrop that doesn'ttrigger an \"onHide\" when clicked.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'static'",
                                "computed": false
                            },
                            {
                                "value": "true",
                                "computed": false
                            },
                            {
                                "value": "false",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "keyboard": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Close the modal when escape key is pressed",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The modal will automatically shift focus to itself when itopens, and replace it to the last focused element when it closes.Generally this should never be set to false as it makes the Modal lessaccessible to assistive technologies, like screen-readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "enforceFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The modal will prevent focus from leaving the Modal whileopen. Consider leaving the default value here, as it is necessary to makethe Modal work well with assistive technologies, such as screen readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "restoreFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The modal will restore focus to previously focused element oncemodal is hidden",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'modal'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Render a large, extra large or small modal.When not provided, the modal is rendered with medium (default) size.@type ('sm'|'lg'|'xl')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fullscreen": {
                    "description": "Renders a fullscreen modal. Specifying a breakpoint will render the modalas fullscreen __below__ the breakpoint size.@type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "centered": {
                    "description": "vertically center the Dialog in the window",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdropClassName": {
                    "description": "Add an optional extra class name to .modal-backdropIt could end up looking like class=\"modal-backdrop foo-modal-backdrop in\".",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "scrollable": {
                    "description": "Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "dialogClassName": {
                    "description": "A css class to apply to the Modal dialog DOM node.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "contentClassName": {
                    "description": "Add an optional extra class name to .modal-content",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "restoreFocusOptions": {
                    "description": "Options passed to focus function when `restoreFocus` is set to `true`@link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters",
                    "type": {
                        "name": "shape",
                        "value": {
                            "preventScroll": {
                                "name": "bool",
                                "required": false
                            }
                        }
                    },
                    "required": false
                },
                "onShow": {
                    "description": "A callback fired when the Modal is opening.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback fired when the header closeButton or non-static backdrop isclicked. Required if either are specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEscapeKeyDown": {
                    "description": "A callback fired when the escape key, if specified in `keyboard`, is pressed.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the Modal transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the Modal begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the Modal finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the Modal transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the Modal begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the Modal finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "manager": {
                    "description": "A ModalManager instance used to track and manage the state of openModals. Useful when customizing how modals interact within a container",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "container": {
                    "description": "@private",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "data-bs-theme": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-describedby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-label": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ModalDialog.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ModalDialog",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@default 'modal'",
                    "type": {
                        "name": "string"
                    }
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": ""
                },
                "size": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'sm' | 'lg' | 'xl'",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'sm'"
                            },
                            {
                                "name": "literal",
                                "value": "'lg'"
                            },
                            {
                                "name": "literal",
                                "value": "'xl'"
                            }
                        ]
                    },
                    "description": "Render a large, extra large or small modal.@type ('sm'|'lg'|'xl')",
                    "type": {
                        "name": "string"
                    }
                },
                "fullscreen": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "| true| string| 'sm-down'| 'md-down'| 'lg-down'| 'xl-down'| 'xxl-down'",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "true"
                            },
                            {
                                "name": "string"
                            },
                            {
                                "name": "literal",
                                "value": "'sm-down'"
                            },
                            {
                                "name": "literal",
                                "value": "'md-down'"
                            },
                            {
                                "name": "literal",
                                "value": "'lg-down'"
                            },
                            {
                                "name": "literal",
                                "value": "'xl-down'"
                            },
                            {
                                "name": "literal",
                                "value": "'xxl-down'"
                            }
                        ]
                    },
                    "description": "Renders a fullscreen modal. Specifying a breakpoint will render the modalas fullscreen __below__ the breakpoint size.@type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    }
                },
                "centered": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Specify whether the Component should be vertically centered",
                    "type": {
                        "name": "bool"
                    }
                },
                "scrollable": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.",
                    "type": {
                        "name": "bool"
                    }
                },
                "contentClassName": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "",
                    "type": {
                        "name": "string"
                    }
                }
            }
        }
    ],
    "./src/ModalTitle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ModalTitle",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "divWithClassName('h4')",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ModalHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ModalHeader",
            "props": {
                "closeLabel": {
                    "defaultValue": {
                        "value": "'Close'",
                        "computed": false
                    },
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'modal-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea Modal component, the onHide will automatically be propagated up to theparent Modal `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ModalFooter.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ModalFooter",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Nav.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Nav",
            "props": {
                "bsPrefix": {
                    "description": "@default 'nav'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbarBsPrefix": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "cardHeaderBsPrefix": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The visual variant of the nav items.@type {('tabs'| 'pills' | 'underline')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "Marks the NavItem with a matching `eventKey` (or `href` if present) as active.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "defaultActiveKey": {
                    "description": "The default active key that is selected on start.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "fill": {
                    "description": "Have all `NavItem`s proportionately fill all available width.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "justify": {
                    "description": "Have all `NavItem`s evenly fill all available width.@type {boolean}",
                    "type": {
                        "name": "custom",
                        "raw": "all(PropTypes.bool, ({ justify, navbar }) =>  justify && navbar ? Error('justify navbar `Nav`s are not supported') : null,)"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a NavItem is selected. jsfunction ( Any eventKey, SyntheticEvent event?) ",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "role": {
                    "description": "ARIA role for the Nav, in the context of a TabContainer, the default willbe set to \"tablist\", but can be overridden by the Nav when set explicitly.When the role is \"tablist\", NavLink focus is managed according tothe ARIA authoring practices for tabs:https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbar": {
                    "description": "Apply styling an alignment for use in a Navbar. This prop will be setautomatically when the Nav is used inside a Navbar.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "navbarScroll": {
                    "description": "Enable vertical scrolling within the toggleable contents of a collapsed Navbar.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "onKeyDown": {
                    "description": "@private",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavDropdown.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavDropdown",
            "props": {
                "title": {
                    "required": true,
                    "tsType": {
                        "name": "ReactReactNode",
                        "raw": "React.ReactNode"
                    },
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    }
                },
                "disabled": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Disables the toggle NavLink",
                    "type": {
                        "name": "bool"
                    }
                },
                "active": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Style the toggle NavLink as active",
                    "type": {
                        "name": "bool"
                    }
                },
                "menuRole": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    }
                },
                "renderMenuOnMount": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    }
                },
                "rootCloseEvent": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'click' | 'mousedown'",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'click'"
                            },
                            {
                                "name": "literal",
                                "value": "'mousedown'"
                            }
                        ]
                    },
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#menu-props) for more details_",
                    "type": {
                        "name": "string"
                    }
                },
                "menuVariant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'dark' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'dark'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    }
                },
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the Toggle component",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            },
            "composes": [
                "Omit"
            ]
        }
    ],
    "./src/NavItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavItem",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavLink.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavLink",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "Anchor",
                        "computed": true
                    },
                    "description": "@default 'a'",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "disabled": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "The disabled state of the NavItem item.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'nav-link'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "The active state of the NavItem item.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "description": "The ARIA role for the `NavLink`, In the context of a 'tablist' parent Nav,the role defaults to 'tab'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "The HTML href attribute for the `NavLink`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "Uniquely identifies the `NavItem` amongst its siblings,used to determine and control the active state of the parent `Nav`",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Navbar.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Navbar",
            "props": {
                "bsPrefix": {
                    "description": "@default 'navbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The general visual variant a the Navbar.Use in combination with the `bg` prop, `background-color` utilities,or your own background styles.@type {('light'|'dark')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "expand": {
                    "description": "The breakpoint, below which, the Navbar will collapse.When `true` the Navbar will always be expanded regardless of screen size.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "bg": {
                    "description": "A convenience prop for adding `bg-*` utility classes since they are so commonly used here.`light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.Pairs nicely with the `variant` prop.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fixed": {
                    "description": "Create a fixed navbar along the top or bottom of the screen, that scrolls with thepage. A convenience prop for the `fixed-*` positioning classes.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "sticky": {
                    "description": "Position the navbar at the top or bottom of the viewport, but only after scrolling past it.A convenience prop for the `sticky-*` positioning classes.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "onToggle": {
                    "description": "A callback fired when the `<Navbar>` body collapses or expands. Fired whena `<Navbar.Toggle>` is clicked and called with the new `expanded`boolean value.@controllable expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a descendant of a child `<Nav>` is selected. Shouldbe used to execute complex closing or other miscellaneous actions desiredafter selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`descendants exist. The callback is called with an eventKey, which is aprop from the selected `<Nav>` descendant, and an event. jsfunction ( eventKey: mixed, event?: SyntheticEvent) For basic closing behavior after all `<Nav>` descendant onSelect events inmobile viewports, try using collapseOnSelect.Note: If you are manually closing the navbar using this `OnSelect` prop,ensure that you are setting `expanded` to false and not *toggling* betweentrue and false.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "collapseOnSelect": {
                    "description": "Toggles `expanded` to `false` after the onSelect event of a descendant of achild `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.Manually controlling `expanded` via the onSelect callback is recommended instead,for more complex operations that need to be executed afterthe `select` event of `<Nav>` descendants.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "expanded": {
                    "description": "Controls the visibility of the navbar body@controllable onToggle",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "description": "The ARIA role for the navbar, will default to 'navigation' forNavbars whose `as` is something other than `<nav>`.@default 'navigation'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavbarCollapse.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavbarCollapse",
            "props": {
                "bsPrefix": {
                    "description": "@default 'navbar-collapse'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavbarBrand.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavbarBrand",
            "props": {
                "bsPrefix": {
                    "description": "@default 'navbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An href, when provided the Brand will render as an `<a>` element (unless `as` is provided).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavbarOffcanvas.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavbarOffcanvas"
        }
    ],
    "./src/NavbarToggle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavbarToggle",
            "props": {
                "label": {
                    "defaultValue": {
                        "value": "'Toggle navigation'",
                        "computed": false
                    },
                    "description": "An accessible ARIA label for the toggler button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'button'",
                        "computed": false
                    },
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'navbar-toggler'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "@private",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "children": {
                    "description": "The toggle content. When empty, the default toggle will be rendered.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Offcanvas.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Offcanvas",
            "props": {
                "placement": {
                    "defaultValue": {
                        "value": "'start'",
                        "computed": false
                    },
                    "description": "Which side of the viewport the offcanvas will appear from.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'start'",
                                "computed": false
                            },
                            {
                                "value": "'end'",
                                "computed": false
                            },
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "show": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "When `true` The offcanvas will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdrop": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Include a backdrop component. Specify 'static' for a backdrop that doesn'ttrigger an \"onHide\" when clicked.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'static'",
                                "computed": false
                            },
                            {
                                "value": "true",
                                "computed": false
                            },
                            {
                                "value": "false",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "keyboard": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Closes the offcanvas when escape key is pressed.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "scroll": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Allow body scrolling while offcanvas is open.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The offcanvas will automatically shift focus to itself when itopens, and replace it to the last focused element when it closes.Generally this should never be set to false as it makes the offcanvas lessaccessible to assistive technologies, like screen-readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "enforceFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The offcanvas will prevent focus from leaving the offcanvas whileopen. Consider leaving the default value here, as it is necessary to makethe offcanvas work well with assistive technologies, such as screen readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "restoreFocus": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The offcanvas will restore focus to previously focused element onceoffcanvas is hidden",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "renderStaticNode": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "For internal use to render static node from NavbarOffcanvas.@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'offcanvas'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "backdropClassName": {
                    "description": "Add an optional extra class name to .offcanvas-backdrop.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "responsive": {
                    "description": "Hide content outside the viewport from a specified breakpoint and down.@type {(\"sm\"|\"md\"|\"lg\"|\"xl\"|\"xxl\")}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "restoreFocusOptions": {
                    "description": "Options passed to focus function when `restoreFocus` is set to `true`@link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters",
                    "type": {
                        "name": "shape",
                        "value": {
                            "preventScroll": {
                                "name": "bool",
                                "required": false
                            }
                        }
                    },
                    "required": false
                },
                "onShow": {
                    "description": "A callback fired when the offcanvas is opening.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback fired when the header closeButton or backdrop isclicked. Required if either are specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEscapeKeyDown": {
                    "description": "A callback fired when the escape key, if specified in `keyboard`, is pressed.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the offcanvas transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the offcanvas begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the offcanvas finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the offcanvas transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the offcanvas begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the offcanvas finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "container": {
                    "description": "@private",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/OffcanvasBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "OffcanvasBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/NavbarText.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "NavbarText",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'span'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/OffcanvasHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "OffcanvasHeader",
            "props": {
                "closeLabel": {
                    "defaultValue": {
                        "value": "'Close'",
                        "computed": false
                    },
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'offcanvas-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea Offcanvas component, the onHide will automatically be propagated up to theparent Offcanvas `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/OffcanvasTitle.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "OffcanvasTitle",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "divWithClassName('h5')",
                        "computed": true
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/OffcanvasToggling.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "OffcanvasToggling",
            "props": {
                "in": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Show the component; triggers the fade in or fade out animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Unmount the component (remove it from the DOM) when it is faded out",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Run the fade in animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "description": "Duration of the fade animation in milliseconds, to ensure that finishingcallbacks are fired even if the original browser transition end events arecanceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component fades in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to fade in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the has component faded in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component fades out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to fade out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has faded out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Overlay.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Overlay",
            "props": {
                "transition": {
                    "defaultValue": {
                        "value": "React.forwardRef<Transition<any>, FadeProps>(  ({ className, children, transitionClasses = {}, onEnter, ...rest }, ref) => {    const props = {      in: false,      timeout: 300,      mountOnEnter: false,      unmountOnExit: false,      appear: false,      ...rest,    };    const handleEnter = useCallback(      (node, isAppearing) => {        triggerBrowserReflow(node);        onEnter?.(node, isAppearing);      },      [onEnter],    );    return (      <TransitionWrapper        ref={ref}        addEndListener={transitionEndListener}        {...props}        onEnter={handleEnter}        childRef={(children as any).ref}      >        {(status: TransitionStatus, innerProps: Record<string, unknown>) =>          React.cloneElement(children, {            ...innerProps,            className: classNames(              'fade',              className,              children.props.className,              fadeStyles[status],              transitionClasses[status],            ),          })        }      </TransitionWrapper>    );  },)",
                        "computed": true
                    },
                    "description": "Animate the entering and exiting of the Overlay. `true` will use the `<Fade>` transition,or a custom react-transition-group `<Transition>` component can be provided.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "elementType"
                            }
                        ]
                    },
                    "required": false
                },
                "popperConfig": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "A set of popper options and props passed directly to Popper.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "rootClose": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Specify whether the overlay should trigger onHide when the user clicks outside the overlay",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "placement": {
                    "defaultValue": {
                        "value": "'top'",
                        "computed": false
                    },
                    "description": "The placement of the Overlay in relation to it's `target`.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'auto-start'",
                                "computed": false
                            },
                            {
                                "value": "'auto'",
                                "computed": false
                            },
                            {
                                "value": "'auto-end'",
                                "computed": false
                            },
                            {
                                "value": "'top-start'",
                                "computed": false
                            },
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'top-end'",
                                "computed": false
                            },
                            {
                                "value": "'right-start'",
                                "computed": false
                            },
                            {
                                "value": "'right'",
                                "computed": false
                            },
                            {
                                "value": "'right-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-start'",
                                "computed": false
                            },
                            {
                                "value": "'left-end'",
                                "computed": false
                            },
                            {
                                "value": "'left'",
                                "computed": false
                            },
                            {
                                "value": "'left-start'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "show": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Set the visibility of the Overlay",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "container": {
                    "description": "A component instance, DOM node, or function that returns either.The `container` element will have the Overlay appended to it via a React portal.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "componentOrElement"
                            },
                            {
                                "name": "func"
                            }
                        ]
                    },
                    "required": false
                },
                "target": {
                    "description": "A component instance, DOM node, or function that returns either.The overlay will be positioned in relation to the `target`",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "componentOrElement"
                            },
                            {
                                "name": "func"
                            }
                        ]
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Specify event for triggering a \"root close\" toggle.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'click'",
                                "computed": false
                            },
                            {
                                "value": "'mousedown'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback invoked by the overlay when it wishes to be hidden. Required if`rootClose` is specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the Overlay transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the Overlay begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the Overlay finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the Overlay transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the Overlay begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the Overlay finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/OverlayTrigger.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "OverlayTrigger",
            "props": {
                "children": {
                    "required": true,
                    "tsType": {
                        "name": "union",
                        "raw": "| React.ReactElement| ((props: OverlayTriggerRenderProps) => React.ReactNode)",
                        "elements": [
                            {
                                "name": "ReactReactElement",
                                "raw": "React.ReactElement"
                            },
                            {
                                "name": "unknown"
                            }
                        ]
                    },
                    "description": "",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "element"
                            },
                            {
                                "name": "func"
                            }
                        ]
                    }
                },
                "trigger": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "OverlayTriggerType | OverlayTriggerType[]",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "'hover' | 'click' | 'focus'",
                                "elements": [
                                    {
                                        "name": "literal",
                                        "value": "'hover'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'click'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'focus'"
                                    }
                                ]
                            },
                            {
                                "name": "Array",
                                "elements": [
                                    {
                                        "name": "union",
                                        "raw": "'hover' | 'click' | 'focus'",
                                        "elements": [
                                            {
                                                "name": "literal",
                                                "value": "'hover'"
                                            },
                                            {
                                                "name": "literal",
                                                "value": "'click'"
                                            },
                                            {
                                                "name": "literal",
                                                "value": "'focus'"
                                            }
                                        ]
                                    }
                                ],
                                "raw": "OverlayTriggerType[]"
                            }
                        ]
                    },
                    "description": "Specify which action or actions trigger Overlay visibilityThe `click` trigger ignores the configured `delay`.@type {'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>}",
                    "defaultValue": {
                        "value": "['hover', 'focus']",
                        "computed": false
                    },
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "triggerType.isRequired"
                            },
                            {
                                "name": "arrayOf",
                                "value": {
                                    "name": "custom",
                                    "raw": "triggerType.isRequired"
                                }
                            }
                        ]
                    }
                },
                "delay": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "number | { show: number; hide: number }",
                        "elements": [
                            {
                                "name": "number"
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ show: number; hide: number }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "show",
                                            "value": {
                                                "name": "number",
                                                "required": true
                                            }
                                        },
                                        {
                                            "key": "hide",
                                            "value": {
                                                "name": "number",
                                                "required": true
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "A millisecond delay amount to show and hide the Overlay once triggered",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "number"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "show": {
                                        "name": "number",
                                        "required": true
                                    },
                                    "hide": {
                                        "name": "number",
                                        "required": true
                                    }
                                }
                            }
                        ]
                    }
                },
                "show": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "The visibility of the Overlay. `show` is a _controlled_ prop so should be pairedwith `onToggle` to avoid breaking user interactions.Manually toggling `show` does **not** wait for `delay` to change the visibility.@controllable onToggle",
                    "type": {
                        "name": "bool"
                    }
                },
                "defaultShow": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "The initial visibility state of the Overlay.",
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                },
                "onToggle": {
                    "required": false,
                    "tsType": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(nextShow: boolean) => void",
                        "signature": {
                            "arguments": [
                                {
                                    "type": {
                                        "name": "boolean"
                                    },
                                    "name": "nextShow"
                                }
                            ],
                            "return": {
                                "name": "void"
                            }
                        }
                    },
                    "description": "A callback that fires when the user triggers a change in tooltip visibility.`onToggle` is called with the desired next `show`, and generally should be passedback to the `show` prop. `onToggle` fires _after_ the configured `delay`@controllable `show`",
                    "type": {
                        "name": "func"
                    }
                },
                "flip": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "The initial flip state of the Overlay.",
                    "defaultValue": {
                        "value": "placement && placement.indexOf('auto') !== -1",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                },
                "overlay": {
                    "required": true,
                    "tsType": {
                        "name": "union",
                        "raw": "| React.ReactElement<OverlayInjectedProps>| ((injected: OverlayInjectedProps) => React.ReactNode)",
                        "elements": [
                            {
                                "name": "ReactReactElement",
                                "raw": "React.ReactElement<OverlayInjectedProps>",
                                "elements": [
                                    {
                                        "name": "OverlayInjectedProps"
                                    }
                                ]
                            },
                            {
                                "name": "unknown"
                            }
                        ]
                    },
                    "description": "An element or text to overlay next to the target.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "func"
                            },
                            {
                                "name": "element"
                            }
                        ]
                    }
                },
                "target": {
                    "required": false,
                    "tsType": {
                        "name": "never"
                    },
                    "description": "@private",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "null",
                                "computed": false
                            }
                        ]
                    }
                },
                "onHide": {
                    "required": false,
                    "tsType": {
                        "name": "never"
                    },
                    "description": "@private",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "null",
                                "computed": false
                            }
                        ]
                    }
                },
                "placement": {
                    "required": false,
                    "tsType": {
                        "name": "unknown"
                    },
                    "description": "The placement of the Overlay in relation to it's `target`.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'auto-start'",
                                "computed": false
                            },
                            {
                                "value": "'auto'",
                                "computed": false
                            },
                            {
                                "value": "'auto-end'",
                                "computed": false
                            },
                            {
                                "value": "'top-start'",
                                "computed": false
                            },
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'top-end'",
                                "computed": false
                            },
                            {
                                "value": "'right-start'",
                                "computed": false
                            },
                            {
                                "value": "'right'",
                                "computed": false
                            },
                            {
                                "value": "'right-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-start'",
                                "computed": false
                            },
                            {
                                "value": "'left-end'",
                                "computed": false
                            },
                            {
                                "value": "'left'",
                                "computed": false
                            },
                            {
                                "value": "'left-start'",
                                "computed": false
                            }
                        ]
                    }
                },
                "popperConfig": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "A Popper.js config object passed to the underlying popper instance.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                }
            },
            "composes": [
                "Omit"
            ]
        }
    ],
    "./src/Pagination.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Pagination",
            "props": {
                "bsPrefix": {
                    "description": "@default 'pagination'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Sets the size of all PageItems.@type {('sm'|'lg')}",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'sm'",
                                "computed": false
                            },
                            {
                                "value": "'lg'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/PageItem.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "PageItem",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": ""
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": "",
                    "defaultValue": {
                        "value": "Anchor",
                        "computed": true
                    }
                },
                "disabled": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Disables the PageItem",
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                },
                "active": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Styles PageItem as active, and renders a `<span>` instead of an `<a>`.",
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                },
                "activeLabel": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "An accessible label indicating the active state.",
                    "defaultValue": {
                        "value": "'(current)'",
                        "computed": false
                    },
                    "type": {
                        "name": "string"
                    }
                },
                "href": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "The HTML href attribute for the `PageItem`.",
                    "type": {
                        "name": "string"
                    }
                },
                "linkStyle": {
                    "required": false,
                    "tsType": {
                        "name": "ReactCSSProperties",
                        "raw": "React.CSSProperties"
                    },
                    "description": "custom style for the inner component of the PageItem",
                    "type": {
                        "name": "object"
                    }
                },
                "linkClassName": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "custom className for the inner component of the PageItem",
                    "type": {
                        "name": "string"
                    }
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Placeholder.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Placeholder",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'span'",
                        "computed": false
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'placeholder'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Changes the animation of the placeholder.@type ('glow'|'wave')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Change the background color of the placeholder.@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Component size variations.@type ('xs'|'sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/PopoverBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "PopoverBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Popover.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Popover",
            "props": {
                "placement": {
                    "defaultValue": {
                        "value": "'right'",
                        "computed": false
                    },
                    "description": "Sets the direction the Popover is positioned towards.> This is generally provided by the `Overlay` component positioning the popover",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'auto-start'",
                                "computed": false
                            },
                            {
                                "value": "'auto'",
                                "computed": false
                            },
                            {
                                "value": "'auto-end'",
                                "computed": false
                            },
                            {
                                "value": "'top-start'",
                                "computed": false
                            },
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'top-end'",
                                "computed": false
                            },
                            {
                                "value": "'right-start'",
                                "computed": false
                            },
                            {
                                "value": "'right'",
                                "computed": false
                            },
                            {
                                "value": "'right-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-start'",
                                "computed": false
                            },
                            {
                                "value": "'left-end'",
                                "computed": false
                            },
                            {
                                "value": "'left'",
                                "computed": false
                            },
                            {
                                "value": "'left-start'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'popover'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute, necessary for accessibility@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "arrowProps": {
                    "description": "An Overlay injected set of props for positioning the popover arrow.> This is generally provided by the `Overlay` component positioning the popover",
                    "type": {
                        "name": "shape",
                        "value": {
                            "ref": {
                                "name": "any",
                                "required": false
                            },
                            "style": {
                                "name": "object",
                                "required": false
                            }
                        }
                    },
                    "required": false
                },
                "body": {
                    "description": "When this prop is set, it creates a Popover with a Popover.Body insidepassing the children directly to it",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "hasDoneInitialMeasure": {
                    "description": "Whether or not Popper has done its initial measurement and positioning.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "popper": {
                    "description": "@private",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "show": {
                    "description": "@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/PlaceholderButton.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "PlaceholderButton",
            "props": {
                "bsPrefix": {
                    "description": "@default 'placeholder'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Changes the animation of the placeholder.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'glow'",
                                "computed": false
                            },
                            {
                                "value": "'wave'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "size": {
                    "description": "",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'xs'",
                                "computed": false
                            },
                            {
                                "value": "'sm'",
                                "computed": false
                            },
                            {
                                "value": "'lg'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "variant": {
                    "description": "Button variant.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/PopoverHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "PopoverHeader",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Ratio.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Ratio",
            "props": {
                "aspectRatio": {
                    "defaultValue": {
                        "value": "'1x1'",
                        "computed": false
                    },
                    "description": "Set the aspect ratio of the embed. A fraction or a percentage can alsobe used to create custom aspect ratios.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "number"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'ratio'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "children": {
                    "description": "This component requires a single child element",
                    "type": {
                        "name": "element"
                    },
                    "required": true
                }
            }
        }
    ],
    "./src/ProgressBar.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ProgressBar",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@private@default 'progress-bar'",
                    "type": {
                        "name": "string"
                    }
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": ""
                },
                "min": {
                    "required": false,
                    "tsType": {
                        "name": "number"
                    },
                    "description": "Minimum value progress can begin from",
                    "type": {
                        "name": "number"
                    }
                },
                "now": {
                    "required": false,
                    "tsType": {
                        "name": "number"
                    },
                    "description": "Current value of progress",
                    "type": {
                        "name": "number"
                    }
                },
                "max": {
                    "required": false,
                    "tsType": {
                        "name": "number"
                    },
                    "description": "Maximum value progress can reach",
                    "type": {
                        "name": "number"
                    }
                },
                "label": {
                    "required": false,
                    "tsType": {
                        "name": "ReactReactNode",
                        "raw": "React.ReactNode"
                    },
                    "description": "Show label that represents visual percentage.EG. 60%",
                    "type": {
                        "name": "node"
                    }
                },
                "visuallyHidden": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Hide's the label visually.",
                    "type": {
                        "name": "bool"
                    }
                },
                "striped": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Uses a gradient to create a striped effect.",
                    "type": {
                        "name": "bool"
                    }
                },
                "animated": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Animate's the stripes from right to left",
                    "type": {
                        "name": "bool"
                    }
                },
                "variant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'success' | 'danger' | 'warning' | 'info' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'success'"
                            },
                            {
                                "name": "literal",
                                "value": "'danger'"
                            },
                            {
                                "name": "literal",
                                "value": "'warning'"
                            },
                            {
                                "name": "literal",
                                "value": "'info'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Sets the background class of the progress bar.@type ('success'|'danger'|'warning'|'info')",
                    "type": {
                        "name": "string"
                    }
                },
                "isChild": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "@private",
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                },
                "children": {
                    "description": "Child elements (only allows elements of type <ProgressBar />)",
                    "type": {
                        "name": "custom",
                        "raw": "function onlyProgressBar(props, propName, componentName): Error | null {  const children = props[propName];  if (!children) {    return null;  }  let error: Error | null = null;  React.Children.forEach(children, (child) => {    if (error) {      return;    }    /**     * Compare types in a way that works with libraries that patch and proxy     * components like react-hot-loader.     *     * see https://github.com/gaearon/react-hot-loader#checking-element-types     */    // eslint-disable-next-line @typescript-eslint/no-use-before-define    const element = <ProgressBar />;    if (child.type === element.type) return;    const childType: any = child.type;    const childIdentifier = React.isValidElement(child)      ? childType.displayName || childType.name || childType      : child;    error = new Error(      `Children of ${componentName} can contain only ProgressBar ` +        `components. Found ${childIdentifier}.`,    );  });  return error;}"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Row.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Row",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@default 'row'",
                    "type": {
                        "name": "string"
                    }
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": "",
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "type": {
                        "name": "elementType"
                    }
                },
                "xs": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on extra small devices (<576px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                },
                "sm": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on small devices (≥576px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                },
                "md": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on medium devices (≥768px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                },
                "lg": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on large devices (≥992px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                },
                "xl": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on extra large devices (≥1200px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                },
                "xxl": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "RowColWidth | { cols?: RowColWidth }",
                        "elements": [
                            {
                                "name": "union",
                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                "elements": [
                                    {
                                        "name": "number"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'1'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'2'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'3'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'4'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'5'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'6'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'7'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'8'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'9'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'10'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'11'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'12'"
                                    },
                                    {
                                        "name": "literal",
                                        "value": "'auto'"
                                    }
                                ],
                                "required": false
                            },
                            {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ cols?: RowColWidth }",
                                "signature": {
                                    "properties": [
                                        {
                                            "key": "cols",
                                            "value": {
                                                "name": "union",
                                                "raw": "| number| '1'| '2'| '3'| '4'| '5'| '6'| '7'| '8'| '9'| '10'| '11'| '12'| 'auto'",
                                                "elements": [
                                                    {
                                                        "name": "number"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'1'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'2'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'3'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'4'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'5'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'6'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'7'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'8'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'9'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'10'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'11'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'12'"
                                                    },
                                                    {
                                                        "name": "literal",
                                                        "value": "'auto'"
                                                    }
                                                ],
                                                "required": false
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "description": "The number of columns that will fit next to each other on extra extra large devices (≥1400px).Use `auto` to give columns their natural widths.@type {(number|'auto'|{ cols: number|'auto' })}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "rowColWidth"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "cols": {
                                        "name": "custom",
                                        "raw": "rowColWidth",
                                        "required": false
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "./src/Spinner.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Spinner",
            "props": {
                "animation": {
                    "defaultValue": {
                        "value": "'border'",
                        "computed": false
                    },
                    "description": "Changes the animation style of the spinner.@type {('border'|'grow')}@default true",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'border'",
                                "computed": false
                            },
                            {
                                "value": "'grow'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "description": "@default div",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'spinner'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The visual color style of the spinner@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'light'|'dark')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Component size variations.@type {('sm')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "children": {
                    "description": "This component may be used to wrap child elements or components.",
                    "type": {
                        "name": "element"
                    },
                    "required": false
                },
                "role": {
                    "description": "An ARIA accessible role applied to the Menu component. This should generally be set to 'status'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/SplitButton.tsx": [
        {
            "description": "A convenience component for simple or general use split button dropdowns. Renders a`ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'sprops](#dropdown-props)._All unknown props are passed through to the `Dropdown` component._The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,and menu-related props are passed to the `Dropdown.Menu`",
            "methods": [],
            "displayName": "SplitButton",
            "props": {
                "type": {
                    "defaultValue": {
                        "value": "'button'",
                        "computed": false
                    },
                    "description": "A `type` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "toggleLabel": {
                    "defaultValue": {
                        "value": "'Toggle dropdown'",
                        "computed": false
                    },
                    "description": "Accessible label for the toggle; the value of `title` if not specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An `href` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "target": {
                    "description": "An anchor `target` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the non-toggle Button",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "title": {
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    },
                    "required": true
                },
                "disabled": {
                    "description": "Disables both Buttons",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu._see [DropdownMenu](#dropdown-menu-props) for more details_@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "custom",
                                "raw": "alignDirection"
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "sm": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "md": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "lg": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "shape",
                                "value": {
                                    "xxl": {
                                        "name": "custom",
                                        "raw": "alignDirection",
                                        "required": false
                                    }
                                }
                            },
                            {
                                "name": "object"
                            }
                        ]
                    },
                    "required": false
                },
                "menuRole": {
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "renderMenuOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#dropdown-menu-props) for more details_",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "flip": {
                    "description": "Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer toPopper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Switch.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Switch"
        }
    ],
    "./src/Stack.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Stack",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "Change the underlying component CSS base class name and modifier class names prefix.**This is an escape hatch** for working with heavily customized bootstrap css.Defaults to `hstack` if direction is `horizontal` or `vstack` if directionis `vertical`.@default 'hstack | vstack'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "gap": {
                    "description": "Sets the spacing between each item. Valid values are `0-5`.",
                    "type": {
                        "name": "custom",
                        "raw": "responsivePropType(PropTypes.number)"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/TabContent.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "TabContent",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/TabPane.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "TabPane",
            "props": {
                "bsPrefix": {
                    "description": "@default 'tab-pane'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A key that associates the `TabPane` with it's controlling `NavLink`.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "active": {
                    "description": "Toggles the active state of the TabPane, this is generally controlled by aTabContainer.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Use animation when showing or hiding `<TabPane>`s. Defaults to `<Fade>`animation, else use `false` to disable or a react-transition-group`<Transition/>` component.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "elementType"
                            }
                        ]
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Transition onEnter callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Transition onEntering callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Transition onEntered callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Transition onExit callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Transition onExiting callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Transition onExited callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the tab (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the tab (remove it from the DOM) when it is no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "id": {
                    "description": "@ignore *",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "@ignore *",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/TabContainer.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "TabContainer",
            "props": {
                "transition": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "boolean | TransitionComponent",
                        "elements": [
                            {
                                "name": "boolean"
                            },
                            {
                                "name": "TransitionComponent"
                            }
                        ]
                    },
                    "description": "Sets a default animation strategy for all children `<TabPane>`s.Defaults to `<Fade>` animation; else, use `false` to disable, or acustom react-transition-group `<Transition/>` component.@type {{Transition | false}}@default {Fade}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "enum",
                                "value": [
                                    {
                                        "value": "false",
                                        "computed": false
                                    }
                                ]
                            },
                            {
                                "name": "elementType"
                            }
                        ]
                    }
                },
                "id": {
                    "description": "HTML id attribute, required if no `generateChildId` propis specified.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount tabs (add them to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount tabs (remove it from the DOM) when they are no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "generateChildId": {
                    "description": "A function that takes an `eventKey` and `type` and returns a unique id forchild tab `<NavItem>`s and `<TabPane>`s. The function _must_ be a purefunction, meaning it should always return the _same_ id for the same setof inputs. The default value requires that an `id` to be set for the`<TabContainer>`.The `type` argument will either be `\"tab\"` or `\"pane\"`.@defaultValue (eventKey, type) => `${props.id}-${type}-${eventKey}`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a tab is selected.@controllable activeKey",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "The `eventKey` of the currently active tab.@controllable onSelect",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                }
            },
            "composes": [
                "Omit"
            ]
        }
    ],
    "./src/Table.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Table",
            "props": {
                "bsPrefix": {
                    "description": "@default 'table'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "striped": {
                    "description": "Adds zebra-striping to any table row within the `<tbody>`.Use `columns` to add zebra-striping to any table column.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                },
                "bordered": {
                    "description": "Adds borders on all sides of the table and cells.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "borderless": {
                    "description": "Removes all borders on the table and cells, including table header.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "hover": {
                    "description": "Enable a hover state on table rows within a `<tbody>`.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "size": {
                    "description": "Make tables more compact by cutting cell padding in half by settingsize as `sm`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Invert the colors of the table — with light text on dark backgroundsby setting variant as `dark`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "responsive": {
                    "description": "Responsive tables allow tables to be scrolled horizontally with ease.Across every breakpoint, use `responsive` for horizontallyscrolling tables. Responsive tables are wrapped automatically in a `div`.Use `responsive=\"sm\"`, `responsive=\"md\"`, `responsive=\"lg\"`, or`responsive=\"xl\"` as needed to create responsive tables up toa particular breakpoint. From that breakpoint and up, the table willbehave normally and not scroll horizontally.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "bool"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ThemeProvider.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ThemeProvider",
            "props": {
                "children": {
                    "required": true,
                    "tsType": {
                        "name": "ReactReactNode",
                        "raw": "React.ReactNode"
                    },
                    "description": ""
                },
                "prefixes": {
                    "defaultValue": {
                        "value": "{}",
                        "computed": false
                    },
                    "description": "An object mapping of Bootstrap component classes thatmap to a custom class.**Note: Changing prefixes is an escape hatch and generallyshouldn't be used.**For more information, see [here](/getting-started/theming/#prefixing-components).",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "breakpoints": {
                    "defaultValue": {
                        "value": "['xxl', 'xl', 'lg', 'md', 'sm', 'xs']",
                        "computed": false
                    },
                    "description": "An array of breakpoints that your application supports.Defaults to the standard Bootstrap breakpoints.",
                    "type": {
                        "name": "arrayOf",
                        "value": {
                            "name": "string"
                        }
                    },
                    "required": false
                },
                "minBreakpoint": {
                    "defaultValue": {
                        "value": "'xs'",
                        "computed": false
                    },
                    "description": "The minimum breakpoint used by your application.Defaults to the smallest of the standard Bootstrap breakpoints.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "dir": {
                    "description": "Indicates the directionality of the application's text.Use `rtl` to set text as \"right to left\".",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            },
            "composes": [
                "Partial"
            ]
        }
    ],
    "./src/Toast.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Toast",
            "props": {
                "transition": {
                    "defaultValue": {
                        "value": "React.forwardRef<Transition<any>, FadeProps>((props, ref) => (  <Fade {...props} ref={ref} transitionClasses={fadeStyles} />))",
                        "computed": true
                    },
                    "description": "A `react-transition-group` Transition component used to animate the Toast on dismissal.",
                    "type": {
                        "name": "elementType"
                    },
                    "required": false
                },
                "show": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "When `true` The toast will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "animation": {
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "description": "Apply a CSS fade transition to the toast",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "delay": {
                    "defaultValue": {
                        "value": "5000",
                        "computed": false
                    },
                    "description": "Delay hiding the toast (ms)",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "autohide": {
                    "defaultValue": {
                        "value": "false",
                        "computed": false
                    },
                    "description": "Auto hide the toast",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'toast'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClose": {
                    "description": "A Callback fired when the close button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the toast transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the toast begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the toast finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Transition onExit callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Transition onExiting callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Transition onExited callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Sets Toast background@type {('primary'|'secondary'|'success'|'danger'|'warning'|'info'|'dark'|'light')}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/Tabs.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Tabs",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": ""
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": ""
                },
                "navbarBsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": ""
                },
                "cardHeaderBsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": ""
                },
                "variant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'tabs' | 'pills' | 'underline' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'tabs'"
                            },
                            {
                                "name": "literal",
                                "value": "'pills'"
                            },
                            {
                                "name": "literal",
                                "value": "'underline'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Navigation style@type {('tabs'| 'pills' | 'underline')}",
                    "type": {
                        "name": "string"
                    }
                },
                "defaultActiveKey": {
                    "required": false,
                    "tsType": {
                        "name": "EventKey"
                    },
                    "description": "The default active key that is selected on start",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    }
                },
                "fill": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Have all `Tabs`s proportionately fill all available width.",
                    "type": {
                        "name": "bool"
                    }
                },
                "justify": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Have all `Tab`s evenly fill all available width.",
                    "type": {
                        "name": "bool"
                    }
                },
                "navbar": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": ""
                },
                "navbarScroll": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": ""
                },
                "transition": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "boolean | TransitionComponent",
                        "elements": [
                            {
                                "name": "boolean"
                            },
                            {
                                "name": "TransitionComponent"
                            }
                        ]
                    },
                    "description": "Sets a default animation strategy for all children `<TabPane>`s.<tbcontDefaults to `<Fade>` animation, else use `false` to disable or areact-transition-group `<Transition/>` component.@type {Transition | false}@default {Fade}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "enum",
                                "value": [
                                    {
                                        "value": "false",
                                        "computed": false
                                    }
                                ]
                            },
                            {
                                "name": "elementType"
                            }
                        ]
                    }
                },
                "activeKey": {
                    "description": "Mark the Tab with a matching `eventKey` as active.@controllable onSelect",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": false
                },
                "id": {
                    "description": "HTML id attribute, required if no `generateChildId` propis specified.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when a Tab is selected. jsfunction (  Any eventKey,  SyntheticEvent event?) @controllable activeKey",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount tabs (add them to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount tabs (remove it from the DOM) when it is no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            },
            "composes": [
                "Omit",
                "BaseNavProps"
            ]
        }
    ],
    "./src/ToastBody.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToastBody",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ToastContainer.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToastContainer",
            "props": {
                "as": {
                    "defaultValue": {
                        "value": "'div'",
                        "computed": false
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'toast-container'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "position": {
                    "description": "Where the toasts will be placed within the container.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'top-start'",
                                "computed": false
                            },
                            {
                                "value": "'top-center'",
                                "computed": false
                            },
                            {
                                "value": "'top-end'",
                                "computed": false
                            },
                            {
                                "value": "'middle-start'",
                                "computed": false
                            },
                            {
                                "value": "'middle-center'",
                                "computed": false
                            },
                            {
                                "value": "'middle-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-start'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-center'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-end'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "containerPosition": {
                    "description": "Specify the positioning method for the container.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ToastFade.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToastFade"
        }
    ],
    "./src/ToastHeader.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToastHeader",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "",
                    "type": {
                        "name": "string"
                    }
                },
                "closeLabel": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "defaultValue": {
                        "value": "'Close'",
                        "computed": false
                    },
                    "type": {
                        "name": "string"
                    }
                },
                "closeVariant": {
                    "required": false,
                    "tsType": {
                        "name": "union",
                        "raw": "'white' | string",
                        "elements": [
                            {
                                "name": "literal",
                                "value": "'white'"
                            },
                            {
                                "name": "string"
                            }
                        ]
                    },
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'white'",
                                "computed": false
                            }
                        ]
                    }
                },
                "closeButton": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Specify whether the Component should contain a close button",
                    "defaultValue": {
                        "value": "true",
                        "computed": false
                    },
                    "type": {
                        "name": "bool"
                    }
                }
            }
        }
    ],
    "./src/Tooltip.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "Tooltip",
            "props": {
                "bsPrefix": {
                    "required": false,
                    "tsType": {
                        "name": "string"
                    },
                    "description": "@default 'tooltip'",
                    "type": {
                        "name": "string"
                    }
                },
                "as": {
                    "required": false,
                    "tsType": {
                        "name": "As"
                    },
                    "description": ""
                },
                "placement": {
                    "required": false,
                    "tsType": {
                        "name": "unknown"
                    },
                    "description": "Sets the direction the Tooltip is positioned towards.> This is generally provided by the `Overlay` component positioning the tooltip",
                    "defaultValue": {
                        "value": "'right'",
                        "computed": false
                    },
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'auto-start'",
                                "computed": false
                            },
                            {
                                "value": "'auto'",
                                "computed": false
                            },
                            {
                                "value": "'auto-end'",
                                "computed": false
                            },
                            {
                                "value": "'top-start'",
                                "computed": false
                            },
                            {
                                "value": "'top'",
                                "computed": false
                            },
                            {
                                "value": "'top-end'",
                                "computed": false
                            },
                            {
                                "value": "'right-start'",
                                "computed": false
                            },
                            {
                                "value": "'right'",
                                "computed": false
                            },
                            {
                                "value": "'right-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-end'",
                                "computed": false
                            },
                            {
                                "value": "'bottom'",
                                "computed": false
                            },
                            {
                                "value": "'bottom-start'",
                                "computed": false
                            },
                            {
                                "value": "'left-end'",
                                "computed": false
                            },
                            {
                                "value": "'left'",
                                "computed": false
                            },
                            {
                                "value": "'left-start'",
                                "computed": false
                            }
                        ]
                    }
                },
                "arrowProps": {
                    "required": false,
                    "tsType": {
                        "name": "Partial",
                        "elements": [
                            {
                                "name": "OverlayArrowProps"
                            }
                        ],
                        "raw": "Partial<OverlayArrowProps>"
                    },
                    "description": "An Overlay injected set of props for positioning the tooltip arrow.> This is generally provided by the `Overlay` component positioning the tooltip@type {{ ref: ReactRef, style: Object }}",
                    "type": {
                        "name": "shape",
                        "value": {
                            "ref": {
                                "name": "any",
                                "required": false
                            },
                            "style": {
                                "name": "object",
                                "required": false
                            }
                        }
                    }
                },
                "show": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "@private",
                    "type": {
                        "name": "any"
                    }
                },
                "popper": {
                    "required": false,
                    "tsType": {
                        "name": "PopperRef"
                    },
                    "description": "@private",
                    "type": {
                        "name": "object"
                    }
                },
                "hasDoneInitialMeasure": {
                    "required": false,
                    "tsType": {
                        "name": "boolean"
                    },
                    "description": "Whether or not Popper has done its initial measurement and positioning.",
                    "type": {
                        "name": "bool"
                    }
                },
                "id": {
                    "description": "An html id attribute, necessary for accessibility@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ToggleButton.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToggleButton",
            "props": {
                "bsPrefix": {
                    "description": "@default 'btn-check'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "The `<input>` element `type`",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'checkbox'",
                                "computed": false
                            },
                            {
                                "value": "'radio'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "name": {
                    "description": "The HTML input name, used to group like checkboxes or radio buttons togethersemantically",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "checked": {
                    "description": "The checked state of the input, managed by `<ToggleButtonGroup>` automatically",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "The disabled state of both the label and input",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "id": {
                    "description": "`id` is required for button clicks to toggle input.",
                    "type": {
                        "name": "string"
                    },
                    "required": true
                },
                "onChange": {
                    "description": "A callback fired when the underlying input element changes. This is passeddirectly to the `<input>` so shares the same signature as a native `onChange` event.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "value": {
                    "description": "The value of the input, should be unique amongst its siblings when nested in a`ToggleButtonGroup`.",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "string"
                            },
                            {
                                "name": "arrayOf",
                                "value": {
                                    "name": "string"
                                }
                            },
                            {
                                "name": "number"
                            }
                        ]
                    },
                    "required": true
                },
                "inputRef": {
                    "description": "A ref attached to the `<input>` element@type {ReactRef}",
                    "type": {
                        "name": "union",
                        "value": [
                            {
                                "name": "func"
                            },
                            {
                                "name": "any"
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/ToggleButtonGroup.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "ToggleButtonGroup",
            "props": {
                "name": {
                    "description": "An HTML `<input>` name for each child button.__Required if `type` is set to `'radio'`__",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "value": {
                    "description": "The value, or array of values, of the active (pressed) buttons@controllable onChange",
                    "type": {
                        "name": "any"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "Callback fired when a button is pressed, depending on whether the `type`is `'radio'` or `'checkbox'`, `onChange` will be called with the value orarray of active values@controllable value",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "type": {
                    "description": "The input `type` of the rendered buttons, determines the toggle behaviorof the buttons",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'checkbox'",
                                "computed": false
                            },
                            {
                                "value": "'radio'",
                                "computed": false
                            }
                        ]
                    },
                    "required": true
                },
                "size": {
                    "description": "Sets the size for all Buttons in the group.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "vertical": {
                    "description": "Make the set of Buttons appear vertically stacked.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/TransitionWrapper.tsx": [
        {
            "description": "",
            "methods": [],
            "displayName": "TransitionWrapper"
        }
    ]
}