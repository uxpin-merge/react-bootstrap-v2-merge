{
    "./src/components/AbstractModalHeader/AbstractModalHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/AbstractModalHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AbstractModalHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "closeLabel": {
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea ModalContext, the onHide will automatically be propagated upto the parent `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Accordion/Accordion.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [
                {
                    "name": "Item",
                    "docblock": null,
                    "modifiers": [
                        "static"
                    ],
                    "params": [
                        {
                            "name": "props",
                            "optional": false,
                            "type": null
                        }
                    ],
                    "returns": null
                }
            ],
            "displayName": "Accordion",
            "props": {
                "children": {
                    "description": "The content of the component",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "The current active key that corresponds to the currently expanded card",
                    "type": {
                        "name": "custom",
                        "raw": "PropTypes.union"
                    },
                    "required": false
                },
                "defaultActiveKey": {
                    "description": "The default active key that is expanded on start",
                    "type": {
                        "name": "custom",
                        "raw": "PropTypes.union"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when the active item changes. js(eventKey: string | string[] | null, event: Object) => void @controllable activeIndex",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "flush": {
                    "description": "Renders accordion edge-to-edge with its parent container",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "alwaysOpen": {
                    "description": "Allow accordion items to stay open when another item is opened",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AccordionBody/AccordionBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AccordionBody",
            "props": {
                "children": {
                    "description": "The content of the component",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-body'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component expands",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to expand",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the component has expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component collapses",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to collapse",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has collapsed",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AccordionItem/AccordionItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AccordionItem",
            "props": {
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A unique key used to control this item's collapse/expand.@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AccordionCollapse/AccordionCollapse.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AccordionCollapse",
            "props": {
                "children": {
                    "description": "The content of the component",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A key that corresponds to the toggler that triggers this collapse's expand or collapse.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AlertHeading/AlertHeading.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/AlertHeading\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AlertHeading",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AccordionHeader/AccordionHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AccordionHeader",
            "props": {
                "children": {
                    "description": "The content of the component",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Click handler for the `AccordionButton` element",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Alert/Alert.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Alert\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Alert",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'alert'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The Alert visual variant@type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "dismissible": {
                    "description": "Renders a properly aligned dismiss button, as well asadding extra horizontal padding to the Alert.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "show": {
                    "description": "Controls the visual state of the Alert.@controllable onClose",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "onClose": {
                    "description": "Callback fired when alert is closed.@controllable show",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "closeLabel": {
                    "description": "Sets the text for alert close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Animate the alert dismissal. Defaults to using `<Fade>` animation or use`false` to disable. A custom `react-transition-group` Transition can alsobe provided.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Badge/Badge.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Badge\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Badge",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bg": {
                    "description": "The visual style of the badge",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "pill": {
                    "description": "Add the `pill` modifier to make badges more rounded withsome additional horizontal padding",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "@default span",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'badge'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "text": {
                    "description": "Sets badge text color",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AlertLink/AlertLink.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/AlertLink\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AlertLink",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Breadcrumb/Breadcrumb.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Breadcrumb\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Breadcrumb",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "listProps": {
                    "description": "Additional props passed as-is to the underlying `<ol>` element",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "label": {
                    "description": "ARIA label for the nav elementhttps://www.w3.org/TR/wai-aria-practices/#breadcrumb",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'breadcrumb'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/BreadcrumbItem/BreadcrumbItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/BreadcrumbItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "BreadcrumbItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "active": {
                    "description": "Adds a visual \"active\" state to a BreadcrumbItem and disables the link.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "linkAs": {
                    "description": "You can use a custom element type for this component's inner link.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "linkProps": {
                    "description": "Additional props passed as-is to the underlying link for non-active items.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'breadcrumb-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "`href` attribute for the inner `a` element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "title": {
                    "description": "`title` attribute for the inner `a` element",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "target": {
                    "description": "`target` attribute for the inner `a` element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Button/Button.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Button\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Button",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "variant": {
                    "description": "One or more button variant combinationsbuttons may be one of a variety of visual variants such as:`'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`as well as \"outline\" versions (prefixed by 'outline-*')`'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "Manually set the visual state of the button to `:active`",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables the Button, preventing mouse events,even if the underlying component is an `<a>` element",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Callback fired when the button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "size": {
                    "description": "Specifies a large or small button.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "Providing a `href` will render an `<a>` element, _styled_ as a button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "Defines HTML button type attribute.@default 'button'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ButtonToolbar/ButtonToolbar.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ButtonToolbar\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ButtonToolbar",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "role": {
                    "description": "The ARIA role describing the button toolbar. Generally the default\"toolbar\" role is correct. An `aria-label` or `aria-labelledby`prop is also recommended.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn-toolbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardBody/CardBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardBody\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardBody",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Card/Card.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Card\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Card",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "body": {
                    "description": "When this prop is set, it creates a Card with a Card.Body insidepassing the children directly to it",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'card'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Sets card background",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "text": {
                    "description": "Sets card text color",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'white'",
                                "computed": false
                            },
                            {
                                "value": "'muted'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "border": {
                    "description": "Sets card border color",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardFooter/CardFooter.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardFooter\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardFooter",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardHeader/CardHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'card-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardGroup/CardGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/AccordionButton/AccordionButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Accordion\n@uxpindescription TODO",
            "methods": [],
            "displayName": "AccordionButton",
            "props": {
                "children": {
                    "description": "The content of the component",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'accordion-button'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardImg/CardImg.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardImg\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardImg",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'card-img'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Defines image position insidethe card.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardSubtitle/CardSubtitle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardSubtitle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardSubtitle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardImgOverlay/CardImgOverlay.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardImgOverlay\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardImgOverlay",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardLink/CardLink.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardLink\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardLink",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ButtonGroup/ButtonGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ButtonGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ButtonGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "vertical": {
                    "description": "Make the set of Buttons appear vertically stacked.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "description": "An ARIA role describing the button group. Usually the default\"group\" role is fine. An `aria-label` or `aria-labelledby`prop is also recommended.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Sets the size for all Buttons in the group.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardTitle/CardTitle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardTitle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardTitle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CardText/CardText.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CardText\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CardText",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Carousel/Carousel.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Carousel\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Carousel",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "defaultActiveIndex": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'carousel'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "slide": {
                    "description": "Enables animation on the Carousel as it transitions between slides.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "fade": {
                    "description": "Animates slides with a crossfade animation instead of the default slide animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "controls": {
                    "description": "Show the Carousel previous and next arrows for changing the current slide",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "indicators": {
                    "description": "Show a set of slide position indicators",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "indicatorLabels": {
                    "description": "An array of labels for the indicators. Defaults to \"Slide #\" if not provided.",
                    "type": {
                        "name": "array"
                    },
                    "required": false
                },
                "activeIndex": {
                    "description": "Controls the current visible slide@controllable onSelect",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when the active item changes. js(eventKey: number, event: Object | null) => void @controllable activeIndex",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSlide": {
                    "description": "Callback fired when a slide transition starts. js(eventKey: number, direction: 'left' | 'right') => void",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSlid": {
                    "description": "Callback fired when a slide transition ends. js(eventKey: number, direction: 'left' | 'right') => void",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "interval": {
                    "description": "The amount of time to delay between automatically cycling an item. If `null`, carousel will not automatically cycle.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "keyboard": {
                    "description": "Whether the carousel should react to keyboard events.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "pause": {
                    "description": "If set to `\"hover\"`, pauses the cycling of the carousel on `mouseenter` and resumes the cycling of the carousel on `mouseleave`. If set to `false`, hovering over the carousel won't pause it.On touch-enabled devices, when set to `\"hover\"`, cycling will pause on `touchend` (once the user finished interacting with the carousel) for two intervals, before automatically resuming. Note that this is in addition to the above mouse behavior.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "wrap": {
                    "description": "Whether the carousel should cycle continuously or have hard stops.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "touch": {
                    "description": "Whether the carousel should support left/right swipe interactions on touchscreen devices.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "prevIcon": {
                    "description": "Override the default button icon for the \"previous\" control",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "prevLabel": {
                    "description": "Label shown to screen readers only, can be used to show the previous elementin the carousel.Set to null to deactivate.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "nextIcon": {
                    "description": "Override the default button icon for the \"next\" control",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "nextLabel": {
                    "description": "Label shown to screen readers only, can be used to show the next elementin the carousel.Set to null to deactivate.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Color variant that controls the colors of the controls, indicatorsand captions.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CloseButton/CloseButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CloseButton\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CloseButton",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "aria-label": {
                    "description": "An accessible label indicating the relevant information about the Close Button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback fired after the Close Button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Render different color variant for the button.Omitting this will render the default dark color.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CarouselItem/CarouselItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CarouselItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CarouselItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'carousel-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "interval": {
                    "description": "The amount of time to delay between automatically cycling this specific item. Will default to the Carousel's `interval` prop value if none is specified.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/CarouselCaption/CarouselCaption.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/CarouselCaption\n@uxpindescription TODO",
            "methods": [],
            "displayName": "CarouselCaption",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Col/Col.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Col\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Col",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'col'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xs": {
                    "description": "The number of columns to span on extra small devices (<576px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "sm": {
                    "description": "The number of columns to span on small devices (≥576px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "md": {
                    "description": "The number of columns to span on medium devices (≥768px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "lg": {
                    "description": "The number of columns to span on large devices (≥992px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xl": {
                    "description": "The number of columns to span on extra large devices (≥1200px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xxl": {
                    "description": "The number of columns to span on extra extra large devices (≥1400px)",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Collapse/Collapse.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Collapse\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Collapse",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "dimension": {
                    "description": "The dimension used when collapsing, or a function that returns thedimension",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "in": {
                    "description": "Show the component; triggers the expand or collapse animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "description": "Duration of the collapse animation in milliseconds, to ensure thatfinishing callbacks are fired even if the original browser transition endevents are canceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the component (remove it from the DOM) when it is collapsed",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "description": "Run the expand animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "getDimensionValue": {
                    "description": "Function that returns the height or width of the animating DOM nodeAllows for providing some custom logic for how much the Collapse componentshould animate in its specified dimension. Called with the currentdimension prop value and the DOM node.@default element.offsetWidth | element.offsetHeight",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component expands",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to expand",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the component has expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component collapses",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to collapse",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has collapsed",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "role": {
                    "description": "ARIA role of collapsible element",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Container/Container.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Container\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Container",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "fluid": {
                    "description": "Allow the Container to fill all of its available horizontal space.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "You can use a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'container'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Dropdown/Dropdown.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Dropdown\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Dropdown",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "drop": {
                    "description": "Determines the direction and location of the Menu in relation to it's Toggle.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu to the specified side of the Dropdown toggle. You canalso align the menu responsively for breakpoints starting at `sm` and up.The alignment direction will affect the specified breakpoint or larger.*Note: Using responsive alignment will disable Popper usage for positioning.*@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "Whether or not the Dropdown is visible.@controllable onToggle",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "onToggle": {
                    "description": "A callback fired when the Dropdown wishes to change visibility. Called with the requested`show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`. jsfunction(  nextShow: boolean,  meta: ToggleMetadata,): void @controllable show",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a menu item is selected. js(eventKey: any, event: Object) => any",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "focusFirstItemOnShow": {
                    "description": "Controls the focus behavior for when the Dropdown is opened. Set to`true` to always focus the first menu item, `keyboard` to focus only whennavigating via the keyboard, or `false` to disable completelyThe Default behavior is `false` **unless** the Menu has a `role=\"menu\"`where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbar": {
                    "description": "@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoClose": {
                    "description": "Controls the auto close behaviour of the dropdown when clicking outside ofthe button or the list.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownButton/DropdownButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownButton\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownButton",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An `href` passed to the Toggle component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the Toggle component",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "title": {
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables both Buttons",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu._see [DropdownMenu](#dropdown-menu-props) for more details_@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "menuRole": {
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "renderMenuOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#dropdown-menu-props) for more details_",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "menuVariant": {
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "flip": {
                    "description": "Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer toPopper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownHeader/DropdownHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "role": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownItem/DropdownItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disable the menu item, making it unselectable.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "Highlight the menu item as active.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "Value passed to the `onSelect` handler, useful for identifying the selected menu item.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "HTML `href` attribute corresponding to `a.href`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "Callback fired when the menu item is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownDivider/DropdownDivider.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownDivider\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownDivider",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "role": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownItemText/DropdownItemText.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownItemText\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownItemText",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Fade/Fade.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Fade\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Fade",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "transitionClasses": {
                    "description": "Applies additional specified classes during the transition. Takes an objectwhere the keys correspond to the Transition status",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "in": {
                    "description": "Show the component; triggers the fade in or fade out animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the component (remove it from the DOM) when it is faded out",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "description": "Run the fade in animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "description": "Duration of the fade animation in milliseconds, to ensure that finishingcallbacks are fired even if the original browser transition end events arecanceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component fades in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to fade in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the has component faded in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component fades out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to fade out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has faded out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownMenu/DropdownMenu.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownMenu\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownMenu",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "flip": {
                    "description": "Have the dropdown switch to it's opposite placement when necessary to stay on screen.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "Control the rendering of the DropdownMenu. All non-menu props(listed here) are passed through to the `as` Component.If providing a custom, non DOM, component. the `show`, `close` and `align` propsare also injected and should be handled appropriately.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-menu'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "Controls the visibility of the Dropdown menu",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "renderOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu to the specified side of the container. You can also alignthe menu responsively for breakpoints starting at `sm` and up. The alignmentdirection will affect the specified breakpoint or larger.*Note: Using responsive alignment will disable Popper usage for positioning.*@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed*Note: For custom dropdown components, you will have to pass the`rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menucomponent ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "popperConfig": {
                    "description": "A set of popper options and props passed directly to Popper.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/DropdownToggle/DropdownToggle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/DropdownToggle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "DropdownToggle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "split": {
                    "description": "",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "childBsPrefix": {
                    "description": "to passthrough to the underlying button or whatever from DropdownButton@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'dropdown-toggle'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute, necessary for assistive technologies, such as screen readers.@type {string|number}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Feedback/Feedback.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Feedback\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Feedback",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "Specify whether the feedback is for valid or invalid fields",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'valid'",
                                "computed": false
                            },
                            {
                                "value": "'invalid'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "tooltip": {
                    "description": "Display feedback as a tooltip.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FigureCaption/FigureCaption.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FigureCaption\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FigureCaption",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FigureImage/FigureImage.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FigureImage\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FigureImage",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "fluid": {
                    "description": "Sets image as fluid image.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'img'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "rounded": {
                    "description": "Sets image shape as rounded.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "roundedCircle": {
                    "description": "Sets image shape as circle.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "thumbnail": {
                    "description": "Sets image shape as thumbnail.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Figure/Figure.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Figure\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Figure",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FloatingLabel/FloatingLabel.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FloatingLabel\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FloatingLabel",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "controlId": {
                    "description": "Sets `id` on `<FormControl>` and `htmlFor` on `<label>`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "label": {
                    "description": "Form control label.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Form/Form.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Form\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Form",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The Form `ref` will be forwarded to the underlying element,which means, unless it's rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "validated": {
                    "description": "Mark a form as having been validated. Setting it to `true` willtoggle any validation styles on the forms elements.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormCheck/FormCheck.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormCheck\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormCheck",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "inline": {
                    "description": "Groups controls horizontally with other `FormCheck`s.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "reverse": {
                    "description": "Put your checkboxes, radios, and switches on the opposite side.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables the control.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isValid": {
                    "description": "Manually style the input as valid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "description": "Manually style the input as invalid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "feedbackTooltip": {
                    "description": "Display feedback as a tooltip.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "title": {
                    "description": "`title` attribute for the underlying `FormCheckLabel`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "The type of checkable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "The underlying HTML element to use when rendering the FormCheck.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-check'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsSwitchPrefix": {
                    "description": "bsPrefix override for the base switch class.@default 'form-switch'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormCheck `ref` will be forwarded to the underlying input element,which means it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "A HTML id attribute, necessary for proper form accessibility.An id is recommended for allowing label clicks to toggle the check control.This is **required** when `type=\"switch\"` due to how they are rendered.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "label": {
                    "description": "Label for the control.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "feedback": {
                    "description": "A message to display when the input is in a validation state",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "feedbackType": {
                    "description": "Specify whether the feedback is for valid or invalid fields",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormCheckInput/FormCheckInput.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormCheckInput\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormCheckInput",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "type": {
                    "description": "The type of checkable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "isValid": {
                    "description": "Manually style the input as valid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "description": "Manually style the input as invalid",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "The underlying HTML element to use when rendering the FormCheckInput.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-check-input'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "A HTML id attribute, necessary for proper form accessibility.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormFloating/FormFloating.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormFloating\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormFloating",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormCheckLabel/FormCheckLabel.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormCheckLabel\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormCheckLabel",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-check-label'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlFor": {
                    "description": "The HTML for attribute for associating the label with an input",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormControl/FormControl.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormControl\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormControl",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "isValid": {
                    "description": "Add \"valid\" validation styles to the control",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "description": "Add \"invalid\" validation styles to the control and accompanying label",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "The underlying HTML element to use when rendering the FormControl.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default {'form-control'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormControl `ref` will be forwarded to the underlying input element,which means unless `as` is a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Input size variants",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'sm'",
                                "computed": false
                            },
                            {
                                "value": "'lg'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "htmlSize": {
                    "description": "The size attribute of the underlying HTML element.Specifies the visible width in characters if `as` is `'input'`.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "plaintext": {
                    "description": "Render the input as plain text. Generally used along side `readOnly`.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "readOnly": {
                    "description": "Make the control readonly",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "type": {
                    "description": "The HTML input `type`, which is only relevant if `as` is `'input'` (the default).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormLabel/FormLabel.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormLabel\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormLabel",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "column": {
                    "description": "Renders the FormLabel as a `<Col>` component (accepting all the same props),as well as adding additional styling for horizontal forms.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "visuallyHidden": {
                    "description": "Hides the label visually while still allowing it to beread by assistive technologies.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-label'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "htmlFor": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormLabel `ref` will be forwarded to the underlying element.Unless the FormLabel is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormGroup/FormGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "controlId": {
                    "description": "Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormGroup `ref` will be forwarded to the underlying element.Unless the FormGroup is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormSelect/FormSelect.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormSelect\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormSelect",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "isValid": {
                    "description": "Add \"valid\" validation styles to the control",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "isInvalid": {
                    "description": "Add \"invalid\" validation styles to the control and accompanying label",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default {'form-select'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Size variants",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'sm'",
                                "computed": false
                            },
                            {
                                "value": "'lg'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "htmlSize": {
                    "description": "The size attribute of the underlying HTML element.Specifies the number of visible options.",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormText/FormText.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormText\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormText",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'form-text'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "_ref": {
                    "description": "The FormText `ref` will be forwarded to the underlying element.Unless the FormText is rendered `as` a composite component,it will be a DOM node, when resolved.@type {ReactRef}@alias ref",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "muted": {
                    "description": "A convenience prop for add the `text-muted` class,since it's so commonly used here.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Image/Image.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Image\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Image",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "fluid": {
                    "description": "Sets image as fluid image.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rounded": {
                    "description": "Sets image shape as rounded.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "roundedCircle": {
                    "description": "Sets image shape as circle.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "thumbnail": {
                    "description": "Sets image shape as thumbnail.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'img'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/InputGroupText/InputGroupText.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/InputGroupText\n@uxpindescription TODO",
            "methods": [],
            "displayName": "InputGroupText",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/InputGroup/InputGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/InputGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "InputGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'input-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Control the size of buttons and form elements from the top-level.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'sm'",
                                "computed": false
                            },
                            {
                                "value": "'lg'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "hasValidation": {
                    "description": "Handles the input's rounded corners when using form validation.Use this when your input group contains both an input and feedback element.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ListGroup/ListGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ListGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ListGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'list-group'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Adds a variant to the list-group",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "horizontal": {
                    "description": "Changes the flow of the list group items from vertical to horizontal.A value of `null` (the default) sets it to vertical for all breakpoints;Just including the prop sets it for all breakpoints, while `{sm|md|lg|xl|xxl}`makes the list group horizontal starting at that breakpoint’s `min-width`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "numbered": {
                    "description": "Generate numbered list items.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "You can use a custom element type for this component.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Modal/Modal.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Modal\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Modal",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "dialogAs": {
                    "description": "A Component type that provides the modal content Markup. This is a usefulprop when you want to use your own styles and markup to create a custommodal component.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "When `true` The modal will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Open and close the Modal with a slide and fade animation.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdrop": {
                    "description": "Include a backdrop component. Specify 'static' for a backdrop that doesn'ttrigger an \"onHide\" when clicked.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "keyboard": {
                    "description": "Close the modal when escape key is pressed",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoFocus": {
                    "description": "When `true` The modal will automatically shift focus to itself when itopens, and replace it to the last focused element when it closes.Generally this should never be set to false as it makes the Modal lessaccessible to assistive technologies, like screen-readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "enforceFocus": {
                    "description": "When `true` The modal will prevent focus from leaving the Modal whileopen. Consider leaving the default value here, as it is necessary to makethe Modal work well with assistive technologies, such as screen readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "restoreFocus": {
                    "description": "When `true` The modal will restore focus to previously focused element oncemodal is hidden",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'modal'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Render a large, extra large or small modal.When not provided, the modal is rendered with medium (default) size.@type ('sm'|'lg'|'xl')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fullscreen": {
                    "description": "Renders a fullscreen modal. Specifying a breakpoint will render the modalas fullscreen __below__ the breakpoint size.@type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "centered": {
                    "description": "vertically center the Dialog in the window",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdropClassName": {
                    "description": "Add an optional extra class name to .modal-backdropIt could end up looking like class=\"modal-backdrop foo-modal-backdrop in\".",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "scrollable": {
                    "description": "Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "dialogClassName": {
                    "description": "A css class to apply to the Modal dialog DOM node.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "contentClassName": {
                    "description": "Add an optional extra class name to .modal-content",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "restoreFocusOptions": {
                    "description": "Options passed to focus function when `restoreFocus` is set to `true`@link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters",
                    "type": {
                        "name": "shape",
                        "value": "",
                        "computed": true
                    },
                    "required": false
                },
                "onShow": {
                    "description": "A callback fired when the Modal is opening.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback fired when the header closeButton or non-static backdrop isclicked. Required if either are specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEscapeKeyDown": {
                    "description": "A callback fired when the escape key, if specified in `keyboard`, is pressed.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the Modal transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the Modal begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the Modal finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the Modal transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the Modal begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the Modal finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "manager": {
                    "description": "A ModalManager instance used to track and manage the state of openModals. Useful when customizing how modals interact within a container",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "container": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "data-bs-theme": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-describedby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-label": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ListGroupItem/ListGroupItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ListGroupItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ListGroupItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'list-group-item'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Sets contextual classes for list item.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "action": {
                    "description": "Marks a ListGroupItem as actionable, applying additional hover, active and disabled stylesfor links and buttons.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "active": {
                    "description": "Sets list item as active.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Sets list item state as disabled.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "href": {
                    "description": "Providing a `href` and setting `action` to `true`, it will render the ListGroup.Item as an `<a>` element (unless `as` is provided).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "You can use a custom element type for this component. For none `action` items, items render as `li`.For actions the default is an anchor or button element depending on whether a `href` is provided.@default {'div' | 'a' | 'button'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ModalBody/ModalBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ModalBody\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ModalBody",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ModalDialog/ModalDialog.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ModalDialog\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ModalDialog",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'modal'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Render a large, extra large or small modal.@type ('sm'|'lg'|'xl')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fullscreen": {
                    "description": "Renders a fullscreen modal. Specifying a breakpoint will render the modalas fullscreen __below__ the breakpoint size.@type (true|'sm-down'|'md-down'|'lg-down'|'xl-down'|'xxl-down')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "centered": {
                    "description": "Specify whether the Component should be vertically centered",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "scrollable": {
                    "description": "Allows scrolling the `<Modal.Body>` instead of the entire Modal when overflowing.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "contentClassName": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ModalHeader/ModalHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ModalHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ModalHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "closeLabel": {
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'modal-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea Modal component, the onHide will automatically be propagated up to theparent Modal `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ModalFooter/ModalFooter.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ModalFooter\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ModalFooter",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Nav/Nav.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Nav\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Nav",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'nav'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbarBsPrefix": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "cardHeaderBsPrefix": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The visual variant of the nav items.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'tabs'",
                                "computed": false
                            },
                            {
                                "value": "'pills'",
                                "computed": false
                            },
                            {
                                "value": "'underline'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "Marks the NavItem with a matching `eventKey` (or `href` if present) as active.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "defaultActiveKey": {
                    "description": "The default active key that is selected on start.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fill": {
                    "description": "Have all `NavItem`s proportionately fill all available width.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "justify": {
                    "description": "Have all `NavItem`s evenly fill all available width.@type {boolean}",
                    "type": {
                        "name": "custom",
                        "raw": "PropTypes.custom"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a NavItem is selected. jsfunction ( Any eventKey, SyntheticEvent event?)",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "role": {
                    "description": "ARIA role for the Nav, in the context of a TabContainer, the default willbe set to \"tablist\", but can be overridden by the Nav when set explicitly.When the role is \"tablist\", NavLink focus is managed according tothe ARIA authoring practices for tabs:https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbar": {
                    "description": "Apply styling an alignment for use in a Navbar. This prop will be setautomatically when the Nav is used inside a Navbar.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "navbarScroll": {
                    "description": "Enable vertical scrolling within the toggleable contents of a collapsed Navbar.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onKeyDown": {
                    "description": "@private",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavItem/NavItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ModalTitle/ModalTitle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ModalTitle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ModalTitle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavDropdown/NavDropdown.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavDropdown\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavDropdown",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "title": {
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables the toggle NavLink",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "active": {
                    "description": "Style the toggle NavLink as active",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "menuRole": {
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "renderMenuOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#menu-props) for more details_",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "menuVariant": {
                    "description": "Menu color variant.Omitting this will use the default light color.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the Toggle component",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavLink/NavLink.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavLink\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavLink",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "@default 'a'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "The disabled state of the NavItem item.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'nav-link'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "The active state of the NavItem item.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "description": "The ARIA role for the `NavLink`, In the context of a 'tablist' parent Nav,the role defaults to 'tab'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "The HTML href attribute for the `NavLink`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "Uniquely identifies the `NavItem` amongst its siblings,used to determine and control the active state of the parent `Nav`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/FormRange/FormRange.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/FormRange\n@uxpindescription TODO",
            "methods": [],
            "displayName": "FormRange",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default {'form-range'}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Make the control disabled",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "value": {
                    "description": "The `value` attribute of underlying input@controllable onChange",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the `value` prop changes",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "id": {
                    "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Navbar/Navbar.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Navbar\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Navbar",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'navbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The general visual variant a the Navbar.Use in combination with the `bg` prop, `background-color` utilities,or your own background styles.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "expand": {
                    "description": "The breakpoint, below which, the Navbar will collapse.When `true` the Navbar will always be expanded regardless of screen size.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bg": {
                    "description": "A convenience prop for adding `bg-*` utility classes since they are so commonly used here.`light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.Pairs nicely with the `variant` prop.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fixed": {
                    "description": "Create a fixed navbar along the top or bottom of the screen, that scrolls with thepage. A convenience prop for the `fixed-*` positioning classes.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "sticky": {
                    "description": "Position the navbar at the top or bottom of the viewport, but only after scrolling past it.A convenience prop for the `sticky-*` positioning classes.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onToggle": {
                    "description": "A callback fired when the `<Navbar>` body collapses or expands. Fired whena `<Navbar.Toggle>` is clicked and called with the new `expanded`boolean value.@controllable expanded",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a descendant of a child `<Nav>` is selected. Shouldbe used to execute complex closing or other miscellaneous actions desiredafter selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`descendants exist. The callback is called with an eventKey, which is aprop from the selected `<Nav>` descendant, and an event. jsfunction ( eventKey: mixed, event?: SyntheticEvent) For basic closing behavior after all `<Nav>` descendant onSelect events inmobile viewports, try using collapseOnSelect.Note: If you are manually closing the navbar using this `OnSelect` prop,ensure that you are setting `expanded` to false and not *toggling* betweentrue and false.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "collapseOnSelect": {
                    "description": "Toggles `expanded` to `false` after the onSelect event of a descendant of achild `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.Manually controlling `expanded` via the onSelect callback is recommended instead,for more complex operations that need to be executed afterthe `select` event of `<Nav>` descendants.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "expanded": {
                    "description": "Controls the visibility of the navbar body@controllable onToggle",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "role": {
                    "description": "The ARIA role for the navbar, will default to 'navigation' forNavbars whose `as` is something other than `<nav>`.@default 'navigation'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavbarBrand/NavbarBrand.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavbarBrand\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavbarBrand",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'navbar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An href, when provided the Brand will render as an `<a>` element (unless `as` is provided).",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "Set a custom element for this component.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavbarCollapse/NavbarCollapse.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavbarCollapse\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavbarCollapse",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'navbar-collapse'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavbarOffcanvas/NavbarOffcanvas.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavbarOffcanvas\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavbarOffcanvas",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/OffcanvasBody/OffcanvasBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/OffcanvasBody\n@uxpindescription TODO",
            "methods": [],
            "displayName": "OffcanvasBody",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavbarText/NavbarText.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavbarText\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavbarText",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Offcanvas/Offcanvas.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Offcanvas\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Offcanvas",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "placement": {
                    "description": "Which side of the viewport the offcanvas will appear from.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "When `true` The offcanvas will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "backdrop": {
                    "description": "Include a backdrop component. Specify 'static' for a backdrop that doesn'ttrigger an \"onHide\" when clicked.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "keyboard": {
                    "description": "Closes the offcanvas when escape key is pressed.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "scroll": {
                    "description": "Allow body scrolling while offcanvas is open.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "autoFocus": {
                    "description": "When `true` The offcanvas will automatically shift focus to itself when itopens, and replace it to the last focused element when it closes.Generally this should never be set to false as it makes the offcanvas lessaccessible to assistive technologies, like screen-readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "enforceFocus": {
                    "description": "When `true` The offcanvas will prevent focus from leaving the offcanvas whileopen. Consider leaving the default value here, as it is necessary to makethe offcanvas work well with assistive technologies, such as screen readers.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "restoreFocus": {
                    "description": "When `true` The offcanvas will restore focus to previously focused element onceoffcanvas is hidden",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "renderStaticNode": {
                    "description": "For internal use to render static node from NavbarOffcanvas.@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'offcanvas'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "backdropClassName": {
                    "description": "Add an optional extra class name to .offcanvas-backdrop.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "responsive": {
                    "description": "Hide content outside the viewport from a specified breakpoint and down.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'\"sm\"'",
                                "computed": false
                            },
                            {
                                "value": "'\"md\"'",
                                "computed": false
                            },
                            {
                                "value": "'\"lg\"'",
                                "computed": false
                            },
                            {
                                "value": "'\"xl\"'",
                                "computed": false
                            },
                            {
                                "value": "'\"xxl\"'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "restoreFocusOptions": {
                    "description": "Options passed to focus function when `restoreFocus` is set to `true`@link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters",
                    "type": {
                        "name": "shape",
                        "value": "",
                        "computed": true
                    },
                    "required": false
                },
                "onShow": {
                    "description": "A callback fired when the offcanvas is opening.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback fired when the header closeButton or backdrop isclicked. Required if either are specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEscapeKeyDown": {
                    "description": "A callback fired when the escape key, if specified in `keyboard`, is pressed.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the offcanvas transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the offcanvas begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the offcanvas finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the offcanvas transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the offcanvas begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the offcanvas finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "container": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/OffcanvasHeader/OffcanvasHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/OffcanvasHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "OffcanvasHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "closeLabel": {
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'offcanvas-header'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A Callback fired when the close button is clicked. If used directly insidea Offcanvas component, the onHide will automatically be propagated up to theparent Offcanvas `onHide`.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/NavbarToggle/NavbarToggle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/NavbarToggle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "NavbarToggle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "label": {
                    "description": "An accessible ARIA label for the toggler button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'navbar-toggler'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "@private",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/OffcanvasToggling/OffcanvasToggling.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/OffcanvasToggling\n@uxpindescription TODO",
            "methods": [],
            "displayName": "OffcanvasToggling",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "in": {
                    "description": "Show the component; triggers the fade in or fade out animation",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the component (remove it from the DOM) when it is faded out",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "appear": {
                    "description": "Run the fade in animation when the component mounts, if it is initiallyshown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "timeout": {
                    "description": "Duration of the fade animation in milliseconds, to ensure that finishingcallbacks are fired even if the original browser transition end events arecanceled",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the component fades in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired after the component starts to fade in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the has component faded in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired before the component fades out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired after the component starts to fade out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the component has faded out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Overlay/Overlay.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Overlay\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Overlay",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Animate the entering and exiting of the Overlay. `true` will use the `<Fade>` transition,or a custom react-transition-group `<Transition>` component can be provided.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "popperConfig": {
                    "description": "A set of popper options and props passed directly to Popper.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "rootClose": {
                    "description": "Specify whether the overlay should trigger onHide when the user clicks outside the overlay",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "placement": {
                    "description": "The placement of the Overlay in relation to it's `target`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "Set the visibility of the Overlay",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "container": {
                    "description": "A component instance, DOM node, or function that returns either.The `container` element will have the Overlay appended to it via a React portal.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "target": {
                    "description": "A component instance, DOM node, or function that returns either.The overlay will be positioned in relation to the `target`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Specify event for triggering a \"root close\" toggle.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "A callback invoked by the overlay when it wishes to be hidden. Required if`rootClose` is specified.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the Overlay transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the Overlay begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the Overlay finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Callback fired right before the Overlay transitions out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Callback fired as the Overlay begins to transition out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Callback fired after the Overlay finishes transitioning out",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/OffcanvasTitle/OffcanvasTitle.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/OffcanvasTitle\n@uxpindescription TODO",
            "methods": [],
            "displayName": "OffcanvasTitle",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/OverlayTrigger/OverlayTrigger.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/OverlayTrigger\n@uxpindescription TODO",
            "methods": [],
            "displayName": "OverlayTrigger",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "trigger": {
                    "description": "Specify which action or actions trigger Overlay visibilityThe `click` trigger ignores the configured `delay`.@type {'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "delay": {
                    "description": "A millisecond delay amount to show and hide the Overlay once triggered",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "The visibility of the Overlay. `show` is a _controlled_ prop so should be pairedwith `onToggle` to avoid breaking user interactions.Manually toggling `show` does **not** wait for `delay` to change the visibility.@controllable onToggle",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "defaultShow": {
                    "description": "The initial visibility state of the Overlay.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "onToggle": {
                    "description": "A callback that fires when the user triggers a change in tooltip visibility.`onToggle` is called with the desired next `show`, and generally should be passedback to the `show` prop. `onToggle` fires _after_ the configured `delay`@controllable `show`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "flip": {
                    "description": "The initial flip state of the Overlay.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "overlay": {
                    "description": "An element or text to overlay next to the target.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "target": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onHide": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "placement": {
                    "description": "The placement of the Overlay in relation to it's `target`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "popperConfig": {
                    "description": "A Popper.js config object passed to the underlying popper instance.",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/PageItem/PageItem.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/PageItem\n@uxpindescription TODO",
            "methods": [],
            "displayName": "PageItem",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables the PageItem",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "active": {
                    "description": "Styles PageItem as active, and renders a `<span>` instead of an `<a>`.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "activeLabel": {
                    "description": "An accessible label indicating the active state.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "The HTML href attribute for the `PageItem`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "linkStyle": {
                    "description": "custom style for the inner component of the PageItem",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "linkClassName": {
                    "description": "custom className for the inner component of the PageItem",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "A callback function for when this component is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Placeholder/Placeholder.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Placeholder\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Placeholder",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'placeholder'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Changes the animation of the placeholder.@type ('glow'|'wave')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Change the background color of the placeholder.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "size": {
                    "description": "Component size variations.@type ('xs'|'sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Pagination/Pagination.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Pagination\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Pagination",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'pagination'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Sets the size of all PageItems.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Popover/Popover.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Popover\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Popover",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "placement": {
                    "description": "Sets the direction the Popover is positioned towards.> This is generally provided by the `Overlay` component positioning the popover",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'popover'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute, necessary for accessibility@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "arrowProps": {
                    "description": "An Overlay injected set of props for positioning the popover arrow.> This is generally provided by the `Overlay` component positioning the popover",
                    "type": {
                        "name": "shape",
                        "value": "",
                        "computed": true
                    },
                    "required": false
                },
                "body": {
                    "description": "When this prop is set, it creates a Popover with a Popover.Body insidepassing the children directly to it",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "hasDoneInitialMeasure": {
                    "description": "Whether or not Popper has done its initial measurement and positioning.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "popper": {
                    "description": "@private",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "show": {
                    "description": "@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/PlaceholderButton/PlaceholderButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/PlaceholderButton\n@uxpindescription TODO",
            "methods": [],
            "displayName": "PlaceholderButton",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'placeholder'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Changes the animation of the placeholder.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Button variant.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/PopoverBody/PopoverBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/PopoverBody\n@uxpindescription TODO",
            "methods": [],
            "displayName": "PopoverBody",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Ratio/Ratio.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Ratio\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Ratio",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "aspectRatio": {
                    "description": "Set the aspect ratio of the embed. A fraction or a percentage can alsobe used to create custom aspect ratios.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'ratio'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ProgressBar/ProgressBar.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ProgressBar\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ProgressBar",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@private@default 'progress-bar'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "min": {
                    "description": "Minimum value progress can begin from",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "now": {
                    "description": "Current value of progress",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "max": {
                    "description": "Maximum value progress can reach",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "label": {
                    "description": "Show label that represents visual percentage.EG. 60%",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "visuallyHidden": {
                    "description": "Hide's the label visually.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "striped": {
                    "description": "Uses a gradient to create a striped effect.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "animated": {
                    "description": "Animate's the stripes from right to left",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Sets the background class of the progress bar.@type ('success'|'danger'|'warning'|'info')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "isChild": {
                    "description": "@private",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Row/Row.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Row\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Row",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'row'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xs": {
                    "description": "The number of columns that will fit next to each other on extra small devices (<576px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "sm": {
                    "description": "The number of columns that will fit next to each other on small devices (≥576px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "md": {
                    "description": "The number of columns that will fit next to each other on medium devices (≥768px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "lg": {
                    "description": "The number of columns that will fit next to each other on large devices (≥992px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xl": {
                    "description": "The number of columns that will fit next to each other on extra large devices (≥1200px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "xxl": {
                    "description": "The number of columns that will fit next to each other on extra extra large devices (≥1400px).Use `auto` to give columns their natural widths.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/PopoverHeader/PopoverHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/PopoverHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "PopoverHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Spinner/Spinner.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Spinner\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Spinner",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Changes the animation style of the spinner.@default true",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "@default div",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'spinner'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "The visual color style of the spinner",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "size": {
                    "description": "Component size variations.",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'sm'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "role": {
                    "description": "An ARIA accessible role applied to the Menu component. This should generally be set to 'status'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Stack/Stack.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Stack\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Stack",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "Change the underlying component CSS base class name and modifier class names prefix.**This is an escape hatch** for working with heavily customized bootstrap css.Defaults to `hstack` if direction is `horizontal` or `vstack` if directionis `vertical`.@default 'hstack | vstack'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "gap": {
                    "description": "Sets the spacing between each item. Valid values are `0-5`.",
                    "type": {
                        "name": "custom",
                        "raw": "PropTypes.custom"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Switch/Switch.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Switch\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Switch",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/SplitButton/SplitButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/SplitButton\n@uxpindescription TODO",
            "methods": [],
            "displayName": "SplitButton",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "type": {
                    "description": "A `type` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "toggleLabel": {
                    "description": "Accessible label for the toggle; the value of `title` if not specified.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "href": {
                    "description": "An `href` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "target": {
                    "description": "An anchor `target` passed to the non-toggle Button",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClick": {
                    "description": "An `onClick` handler passed to the non-toggle Button",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "title": {
                    "description": "The content of the non-toggle Button.",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "Disables both Buttons",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "align": {
                    "description": "Aligns the dropdown menu._see [DropdownMenu](#dropdown-menu-props) for more details_@type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "menuRole": {
                    "description": "An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "renderMenuOnMount": {
                    "description": "Whether to render the dropdown menu in the DOM before the first time it is shown",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "rootCloseEvent": {
                    "description": "Which event when fired outside the component will cause it to be closed._see [DropdownMenu](#dropdown-menu-props) for more details_",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "flip": {
                    "description": "Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer toPopper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "@ignore",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/TabContent/TabContent.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/TabContent\n@uxpindescription TODO",
            "methods": [],
            "displayName": "TabContent",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/TabContainer/TabContainer.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/TabContainer\n@uxpindescription TODO",
            "methods": [],
            "displayName": "TabContainer",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Sets a default animation strategy for all children `<TabPane>`s.Defaults to `<Fade>` animation; else, use `false` to disable, or acustom react-transition-group `<Transition/>` component.@type {{Transition | false}}@default {Fade}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "HTML id attribute, required if no `generateChildId` propis specified.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount tabs (add them to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount tabs (remove it from the DOM) when they are no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "generateChildId": {
                    "description": "A function that takes an `eventKey` and `type` and returns a unique id forchild tab `<NavItem>`s and `<TabPane>`s. The function _must_ be a purefunction, meaning it should always return the _same_ id for the same setof inputs. The default value requires that an `id` to be set for the`<TabContainer>`.The `type` argument will either be `\"tab\"` or `\"pane\"`.@defaultValue (eventKey, type) => `${props.id}-${type}-${eventKey}`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "A callback fired when a tab is selected.@controllable activeKey",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "The `eventKey` of the currently active tab.@controllable onSelect",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Table/Table.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Table\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Table",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'table'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "striped": {
                    "description": "Adds zebra-striping to any table row within the `<tbody>`.Use `columns` to add zebra-striping to any table column.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bordered": {
                    "description": "Adds borders on all sides of the table and cells.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "borderless": {
                    "description": "Removes all borders on the table and cells, including table header.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "hover": {
                    "description": "Enable a hover state on table rows within a `<tbody>`.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "size": {
                    "description": "Make tables more compact by cutting cell padding in half by settingsize as `sm`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Invert the colors of the table — with light text on dark backgroundsby setting variant as `dark`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "responsive": {
                    "description": "Responsive tables allow tables to be scrolled horizontally with ease.Across every breakpoint, use `responsive` for horizontallyscrolling tables. Responsive tables are wrapped automatically in a `div`.Use `responsive=\"sm\"`, `responsive=\"md\"`, `responsive=\"lg\"`, or`responsive=\"xl\"` as needed to create responsive tables up toa particular breakpoint. From that breakpoint and up, the table willbehave normally and not scroll horizontally.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Tabs/Tabs.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Tabs\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Tabs",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbarBsPrefix": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "cardHeaderBsPrefix": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "variant": {
                    "description": "Navigation style",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'tabs'",
                                "computed": false
                            },
                            {
                                "value": "'pills'",
                                "computed": false
                            },
                            {
                                "value": "'underline'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                },
                "defaultActiveKey": {
                    "description": "The default active key that is selected on start",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "fill": {
                    "description": "Have all `Tabs`s proportionately fill all available width.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "justify": {
                    "description": "Have all `Tab`s evenly fill all available width.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "navbar": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "navbarScroll": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Sets a default animation strategy for all children `<TabPane>`s.<tbcontDefaults to `<Fade>` animation, else use `false` to disable or areact-transition-group `<Transition/>` component.@type {Transition | false}@default {Fade}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "activeKey": {
                    "description": "Mark the Tab with a matching `eventKey` as active.@controllable onSelect",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "id": {
                    "description": "HTML id attribute, required if no `generateChildId` propis specified.@type {string}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onSelect": {
                    "description": "Callback fired when a Tab is selected. jsfunction (  Any eventKey,  SyntheticEvent event?) @controllable activeKey",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount tabs (add them to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount tabs (remove it from the DOM) when it is no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/TabPane/TabPane.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/TabPane\n@uxpindescription TODO",
            "methods": [],
            "displayName": "TabPane",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'tab-pane'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "eventKey": {
                    "description": "A key that associates the `TabPane` with it's controlling `NavLink`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "active": {
                    "description": "Toggles the active state of the TabPane, this is generally controlled by aTabContainer.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "transition": {
                    "description": "Use animation when showing or hiding `<TabPane>`s. Defaults to `<Fade>`animation, else use `false` to disable or a react-transition-group`<Transition/>` component.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Transition onEnter callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Transition onEntering callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Transition onEntered callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Transition onExit callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Transition onExiting callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Transition onExited callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "mountOnEnter": {
                    "description": "Wait until the first \"enter\" transition to mount the tab (add it to the DOM)",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "unmountOnExit": {
                    "description": "Unmount the tab (remove it from the DOM) when it is no longer visible",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "id": {
                    "description": "@ignore *",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "aria-labelledby": {
                    "description": "@ignore *",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ThemeProvider/ThemeProvider.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ThemeProvider\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ThemeProvider",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "prefixes": {
                    "description": "An object mapping of Bootstrap component classes thatmap to a custom class.**Note: Changing prefixes is an escape hatch and generallyshouldn't be used.**For more information, see [here](/getting-started/theming/#prefixing-components).",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "breakpoints": {
                    "description": "An array of breakpoints that your application supports.Defaults to the standard Bootstrap breakpoints.",
                    "type": {
                        "name": "arrayOf",
                        "value": "",
                        "computed": true
                    },
                    "required": false
                },
                "minBreakpoint": {
                    "description": "The minimum breakpoint used by your application.Defaults to the smallest of the standard Bootstrap breakpoints.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "dir": {
                    "description": "Indicates the directionality of the application's text.Use `rtl` to set text as \"right to left\".",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Toast/Toast.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Toast\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Toast",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "transition": {
                    "description": "A `react-transition-group` Transition component used to animate the Toast on dismissal.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "show": {
                    "description": "When `true` The toast will show itself.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "animation": {
                    "description": "Apply a CSS fade transition to the toast",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "delay": {
                    "description": "Delay hiding the toast (ms)",
                    "type": {
                        "name": "number"
                    },
                    "required": false
                },
                "autohide": {
                    "description": "Auto hide the toast",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'toast'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onClose": {
                    "description": "A Callback fired when the close button is clicked.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEnter": {
                    "description": "Callback fired before the toast transitions in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntering": {
                    "description": "Callback fired as the toast begins to transition in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onEntered": {
                    "description": "Callback fired after the toast finishes transitioning in",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExit": {
                    "description": "Transition onExit callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExiting": {
                    "description": "Transition onExiting callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "onExited": {
                    "description": "Transition onExited callback when animation is not `false`",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "bg": {
                    "description": "Sets Toast background",
                    "type": {
                        "name": "enum",
                        "value": [
                            {
                                "value": "'primary'",
                                "computed": false
                            },
                            {
                                "value": "'secondary'",
                                "computed": false
                            },
                            {
                                "value": "'success'",
                                "computed": false
                            },
                            {
                                "value": "'danger'",
                                "computed": false
                            },
                            {
                                "value": "'warning'",
                                "computed": false
                            },
                            {
                                "value": "'info'",
                                "computed": false
                            },
                            {
                                "value": "'dark'",
                                "computed": false
                            },
                            {
                                "value": "'light'",
                                "computed": false
                            }
                        ]
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToastBody/ToastBody.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToastBody\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToastBody",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToastFade/ToastFade.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToastFade\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToastFade",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToggleButton/ToggleButton.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToggleButton\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToggleButton",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'btn-check'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "type": {
                    "description": "The `<input>` element `type`",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "name": {
                    "description": "The HTML input name, used to group like checkboxes or radio buttons togethersemantically",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "checked": {
                    "description": "The checked state of the input, managed by `<ToggleButtonGroup>` automatically",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "disabled": {
                    "description": "The disabled state of both the label and input",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "id": {
                    "description": "`id` is required for button clicks to toggle input.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "A callback fired when the underlying input element changes. This is passeddirectly to the `<input>` so shares the same signature as a native `onChange` event.",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "value": {
                    "description": "The value of the input, should be unique amongst its siblings when nested in a`ToggleButtonGroup`.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "inputRef": {
                    "description": "A ref attached to the `<input>` element@type {ReactRef}",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToastContainer/ToastContainer.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToastContainer\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToastContainer",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'toast-container'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "position": {
                    "description": "Where the toasts will be placed within the container.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "containerPosition": {
                    "description": "Specify the positioning method for the container.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToggleButtonGroup/ToggleButtonGroup.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToggleButtonGroup\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToggleButtonGroup",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "name": {
                    "description": "An HTML `<input>` name for each child button.__Required if `type` is set to `'radio'`__",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "value": {
                    "description": "The value, or array of values, of the active (pressed) buttons@controllable onChange",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "onChange": {
                    "description": "Callback fired when a button is pressed, depending on whether the `type`is `'radio'` or `'checkbox'`, `onChange` will be called with the value orarray of active values@controllable value",
                    "type": {
                        "name": "func"
                    },
                    "required": false
                },
                "type": {
                    "description": "The input `type` of the rendered buttons, determines the toggle behaviorof the buttons",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "size": {
                    "description": "Sets the size for all Buttons in the group.@type ('sm'|'lg')",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "vertical": {
                    "description": "Make the set of Buttons appear vertically stacked.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/ToastHeader/ToastHeader.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/ToastHeader\n@uxpindescription TODO",
            "methods": [],
            "displayName": "ToastHeader",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeLabel": {
                    "description": "Provides an accessible label for the closebutton. It is used for Assistive Technology when the label text is notreadable.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeVariant": {
                    "description": "Sets the variant for close button.",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "closeButton": {
                    "description": "Specify whether the Component should contain a close button",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/Tooltip/Tooltip.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/Tooltip\n@uxpindescription TODO",
            "methods": [],
            "displayName": "Tooltip",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                },
                "bsPrefix": {
                    "description": "@default 'tooltip'",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "as": {
                    "description": "",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "placement": {
                    "description": "Sets the direction the Tooltip is positioned towards.> This is generally provided by the `Overlay` component positioning the tooltip",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "arrowProps": {
                    "description": "An Overlay injected set of props for positioning the tooltip arrow.> This is generally provided by the `Overlay` component positioning the tooltip@type {{ ref: ReactRef, style: Object }}",
                    "type": {
                        "name": "shape",
                        "value": "",
                        "computed": true
                    },
                    "required": false
                },
                "show": {
                    "description": "@private",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                },
                "popper": {
                    "description": "@private",
                    "type": {
                        "name": "object"
                    },
                    "required": false
                },
                "hasDoneInitialMeasure": {
                    "description": "Whether or not Popper has done its initial measurement and positioning.",
                    "type": {
                        "name": "bool"
                    },
                    "required": false
                },
                "id": {
                    "description": "An html id attribute, necessary for accessibility@type {string}@required",
                    "type": {
                        "name": "string"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/map/map.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/map\n@uxpindescription TODO",
            "methods": [],
            "displayName": "map",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ],
    "./src/components/TransitionWrapper/TransitionWrapper.jsx": [
        {
            "description": "@uxpindocurl https://react-bootstrap.github.io/docs/components/TransitionWrapper\n@uxpindescription TODO",
            "methods": [],
            "displayName": "TransitionWrapper",
            "props": {
                "children": {
                    "description": "",
                    "type": {
                        "name": "node"
                    },
                    "required": false
                }
            }
        }
    ]
}